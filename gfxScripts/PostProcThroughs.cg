void pp_vp(
    uniform float4x4 wvpMat,
	in float4 position : POSITION,
	out float4 oposition : POSITION,
	in float2 iuv  : TEXCOORD0,
	out float2 uv  : TEXCOORD0 
)
{
    oposition = mul(wvpMat, position);
    uv = iuv;
}

float4 combineSmoke(float4 scene, float4 smoke)
{
	smoke.a = saturate(smoke.a);
	return float4(lerp(scene.rgb,clamp(smoke.rgb,0,1),smoke.a),smoke.a);
}

float3x3 getRotationMatrixX(float angle)
{
	return float3x3(1, 0, 0,
					0, cos(angle), -sin(angle),
					0, sin(angle), cos(angle));
}

float3x3 getRotationMatrixY(float angle)
{
	return float3x3(cos(angle),0, sin(angle),
					0, 1, 0,
					-sin(angle), 0, cos(angle));
}

float3x3 getRotationMatrixZ(float angle)
{
	return float3x3(cos(angle), -sin(angle), 0,
					sin(angle), cos(angle), 0,
					0, 0, 1);
}

float3x3 getRotationMatrix(float angleX, float angleY, float angleZ)
{
	if(angleX==0)
		return mul(getRotationMatrixZ(angleZ),getRotationMatrixY(angleY));
	if(angleY==0)
		return mul(getRotationMatrixZ(angleZ),getRotationMatrixX(angleX));
	if(angleZ==0)
		return mul(getRotationMatrixX(angleX),getRotationMatrixY(angleY));
}

float4 CubemapBlur_fp
    (
         float2 uv: TEXCOORD0,
		 uniform float3 baseDir,
		 uniform samplerCube envMap : register(s0)
    ) : COLOR
{   
	float pi = 3.1416;
	uv.y = 1 - uv.y;
	float2 piAngles = (uv.xy - 0.5);
	
	piAngles.x = tan(pi*0.5*piAngles.x)*0.5;
	piAngles.y = tan(pi*0.5*piAngles.y)*0.5;
	
	float3 offsetAngles;
	
	if(baseDir.x == 1)
		offsetAngles = float3(0, piAngles.x, piAngles.y);
	if(baseDir.x == -1)
		offsetAngles = float3(0, piAngles.x, -piAngles.y);
	if(baseDir.y == 1)
		offsetAngles = float3(-piAngles.x, 0, -piAngles.y);
	if(baseDir.y == -1)
		offsetAngles = float3(-piAngles.x, 0, piAngles.y);
	if(baseDir.z == 1)
		offsetAngles = float3(-piAngles.y, piAngles.x, 0);
	if(baseDir.z == -1)
		offsetAngles = float3(piAngles.y, piAngles.x, 0);
		
	offsetAngles /= max(1,length(piAngles));
	offsetAngles *= pi*0.5; //-45 - 45 (pi/4)
	
	//offsetAngles.y += pi;
	
	float3x3 rotMatrix = getRotationMatrix(offsetAngles.x, offsetAngles.y, offsetAngles.z);
	float3 coord = mul(rotMatrix,baseDir);

	float3 diffuseTex;
	int kernel = 20;
	float sizeTxt = 3/64.0;
	
	for(int i=0;i<kernel*2+1;i++)
	{
		float sample = (i-kernel)*sizeTxt;
		
		float3x3 rotMatrixX;
		if(abs(baseDir.x) > 0)
			rotMatrixX = getRotationMatrixY(sample);
		else if(abs(baseDir.y) > 0)
			rotMatrixX = getRotationMatrixX(sample);
		else
			rotMatrixX = getRotationMatrixY(sample);
			
		float3 coordX = mul(rotMatrixX,coord);

		diffuseTex += texCUBE(envMap,coordX).rgb;
	}
	
	for(int i=0;i<kernel*2+1;i++)
	{
		float sample = (i-kernel)*sizeTxt;
		
		float3x3 rotMatrixY;
		if(abs(baseDir.x) > 0)
			rotMatrixY = getRotationMatrixZ(sample);
		else if(abs(baseDir.y) > 0)
			rotMatrixY = getRotationMatrixZ(sample);
		else
			rotMatrixY = getRotationMatrixX(sample);
			
		float3 coordY = mul(rotMatrixY,coord);

		diffuseTex += texCUBE(envMap,coordY).rgb;
	}
	
	diffuseTex /= 2*(kernel*2 + 1);
	
	return float4(diffuseTex+0.25,1);
}


float4 ReconstructSSR_fp
    (
		float2 texCoord: TEXCOORD0,
		uniform float4x4 invViewProjMatrix,
		uniform float4x4 prevViewProjMatrix,
		uniform sampler2D lastSsr: register(s0),
		uniform sampler2D depthMap: register(s1)
    ) : COLOR
{   
	float zOverW = 1 - tex2D(depthMap, texCoord).r;   

	// H is the viewport position at this pixel in the range -1 to 1.   
	float4 H = float4(texCoord.x * 2 - 1, (1 - texCoord.y) * 2 - 1,   
	zOverW, 1);   

	// Transform by the view-projection inverse.   
	float4 D = mul(invViewProjMatrix,H );


	// Divide by w to get the world position.   
	float4 worldPos = D / D.w;  

	// Current viewport position   
	//float4 currentPos = H;   

	// Use the world position, and transform by the previous view-   
	// projection matrix.   
	float4 previousPos = mul(prevViewProjMatrix,worldPos);  

	// Convert to nonhomogeneous points [-1,1] by dividing by w.   
	previousPos /= previousPos.w;   
	
	previousPos.y *= -1;
	previousPos.xy = previousPos.xy*0.5 + 0.5;
	
    float4 ssr=tex2D(lastSsr, previousPos.xy);

	return ssr;
}


float4 ModThrough_fp
    (
         float2 uv: TEXCOORD0,
         uniform sampler2D sceneMap: register(s0),
	    uniform sampler2D adder: register(s1)
    ) : COLOR
{   
    float4 smoke=tex2D(adder, uv);
	float4 scene = tex2D(sceneMap, uv);

	return combineSmoke(scene,smoke);
}

float4 AddThrough_fp
    (
         float2 uv: TEXCOORD0,
         uniform sampler2D scene: register(s0),
	    uniform sampler2D adder: register(s1)
    ) : COLOR
{   
    float4 add=tex2D(adder, uv);

	return tex2D(scene, uv)+float4(add.rgb,0);
}

float4 MulThrough_fp
    (
         float2 uv: TEXCOORD0,
         uniform sampler2D scene: register(s0),
	    uniform sampler2D muller: register(s1)
    ) : COLOR
{   
    float4 mul=tex2D(muller, uv);

	return tex2D(scene, uv)*float4(mul.rgb,1);
}

float4 MinThrough_fp
    (
         float2 uv: TEXCOORD0,
         uniform sampler2D t1: register(s0),
	    uniform sampler2D t2: register(s1)
    ) : COLOR
{   
    float v1=tex2D(t1, uv);
	float v2=tex2D(t2, uv);

	return (v2==0) ? v1 : min(v1,v2);
}

float4 PutThrough_fp
    (
         float2 uv: TEXCOORD0,
         uniform sampler2D scene: register(s0)
    ) : COLOR
{   
    float4 o=tex2D(scene, uv);
	return o;
}

float4 PutThrough2_fp
    (
         float2 uv: TEXCOORD0,
         uniform sampler2D map: register(s0),
		 uniform sampler2D map2: register(s1),
		 uniform sampler2D mapSmoke: register(s2)
    ) : COLOR
{   
    float4 scene = tex2D(map, uv) + tex2D(map2, uv);
    float4 smoke=tex2D(mapSmoke, uv);

	return combineSmoke(scene,smoke);
}

float4 CombineScene_fp
    (
        float2 uv: TEXCOORD0,
		uniform float time,
		uniform float ppDistortion,
        uniform sampler2D sceneMap: register(s0),
	    uniform sampler2D depth: register(s1),
		uniform sampler2D smokeMap: register(s2),
	    uniform sampler2D waterMap: register(s3),
		uniform sampler2D sceneDistortion: register(s4),
		uniform sampler2D ppDistMap: register(s5)
    ) : COLOR
{   
	float4 distScene = tex2D(sceneDistortion,uv);
	
	float2 distUV = uv*1.5;
	distUV.y += time*-0.5;

	float4 distPP = tex2D(ppDistMap,distUV);
	
	float heightEnd = ppDistortion*ppDistortion;//fmod(time,3)/3;
	float w = saturate(distPP.a-heightEnd);
	
	if(w >0 && w < 0.2)
		w = lerp(w,lerp(15,0.2,w*5),heightEnd);
	
	distPP.xy = (distPP.xy - 0.5)*w*0.3; 
	
	float distW = distScene.w;
	float2 transpDist = (distScene.w == 0) ? 0 :(distScene.xy-0.75)*distW;
	//float2 dist = (distScene.a==0) ? 0 : (distScene.xy - 0.5);	
	float2 dist = (transpDist + distPP.xy)/2;
	
	float4 scene = tex2D(sceneMap, uv+dist);
	
	float4 water = tex2D(waterMap,uv + distPP.xy/2);
	scene = scene*(1-water.a) + water;
	
	float4 smoke = tex2D(smokeMap, uv+dist);
	scene = combineSmoke(scene, smoke);
	
	if(tex2D(depth, uv+dist).g>10000)
		scene.a = 0;
	else
		scene.a = saturate((tex2D(depth, uv+dist).g-200)/300);
	
	scene.a -= smoke.a;
	
	return scene;
}