struct VIn
{
    float4 p : POSITION;
    float3 n : NORMAL;
    float3 t : TANGENT;
    float2 uv  : TEXCOORD0;
    float3 c : COLOR;
};

struct VOut
{
    float4 p : POSITION;
    float4 uv  : TEXCOORD0;
    float3 wp  : TEXCOORD1;
    float3 n : TEXCOORD2;
    float3 t : TEXCOORD3;
    float3 b : TEXCOORD6;
};

struct PIn
{
    float4 uv  : TEXCOORD0;
    float3 wp  : TEXCOORD1;
    float4 n : TEXCOORD2;
    float4 t : TEXCOORD3;
    float3 b : TEXCOORD6;
};


VOut diffuse_vs(VIn IN,
	uniform float4x4 wMat,
	uniform float4x4 wvpMat,
	uniform float3 camPos
)
{
    VOut OUT;
    float4 wpos = mul(wMat, IN.p);

	OUT.p = mul(wvpMat, IN.p);
	OUT.wp.xyz=wpos.xyz;
    
    OUT.uv.xy = IN.uv.xy;
    OUT.uv.zw = OUT.p.zw;

    OUT.n.xyz = IN.n;
    OUT.t.xyz = IN.t;
    OUT.b.xyz = cross(IN.t.xyz, IN.n.xyz);
	
    return OUT;
}

float3 offsetCubemapUV(in float3 v, float3 CubemapPositionWS, float3 PositionWS, float EnvMapOffset)
{  
	float3 ReflDirectionWS = v;
	return (normalize(PositionWS - CubemapPositionWS)*EnvMapOffset + ReflDirectionWS);
}

void diffuse_ps(
	PIn IN,
	uniform float3 diffuseColor,
	uniform float4 specColorPow,
	uniform float brightness,
	uniform float2 uvScale,
	uniform float4 lightPos0,
	uniform float3 camPos,
	uniform float4 fogColor,
	uniform float4 fogParams,
	uniform float4x4 iTWMat,
	uniform float4 cubemapWPOffset,
	uniform float3 ambientColor,
	uniform float ambientWeight,
	uniform float4 fresDepthFadeDist,
	uniform sampler2D diffuseMap : register(s0),
	uniform sampler2D normalMap : register(s1),
	uniform samplerCube reflMap : register(s2),
	uniform sampler2D depthMap : register(s3),
	float2 screenSpace : WPOS,
	out float4 color0 : COLOR0,
	out float4 color1 : COLOR1,
	out float4 color2 : COLOR2,
	out float4 color3 : COLOR3
)
{
	float finalDepthFade = fresDepthFadeDist.z;
	float depthFade = fresDepthFadeDist.y;

    // direction
    float3 ld0 = lightPos0.xyz;
	float4 diffTex = tex2D(diffuseMap, IN.uv.xy*uvScale.x);

	float3 normalTex = tex2D(normalMap, IN.uv.xy*uvScale.y).rgb;
    float3x3 tbn = float3x3(IN.t.xyz,IN.b.xyz, IN.n.xyz);
    float3 normal = mul(transpose(tbn), normalTex.xyz * 2 - 1); // to object space
    normal = normalize(mul((float3x3)iTWMat, normal));
    
	float3 camDir = camPos - IN.wp.xyz;
	float dist = length(camDir);
	camDir = normalize(camDir);
	
	float3 ReflectDir = reflect(camDir,normal);
	ReflectDir.z *= -1;
	float3 cubeDir = offsetCubemapUV(ReflectDir,cubemapWPOffset.xyz,IN.wp.xyz, cubemapWPOffset.w);
	float fresnel = saturate(pow(1 - abs(dot(camDir, normal)), fresDepthFadeDist.x));
	//fresnel = 1;	
	float3 reflTex = texCUBE(reflMap,cubeDir).rgb;
	diffTex.rgb = lerp(diffTex.rgb, reflTex, fresnel);
	
	float diffuseLight = dot(ld0, normal);
	diffuseLight = abs(max(diffuseLight,diffuseLight/2));
	
	ambientColor *= ambientWeight;
	
	diffTex.rgb *= ambientColor + diffuseLight; //max(ambientColor*0.01, diffuseLight)*4;
	
	float2 invSize = 1/float2(1280.0f,768.0f);
	//fade depth
	float2 depthTexCoord=screenSpace*invSize;
	float3 depthEnv=tex2D(depthMap,depthTexCoord).rgb;  
	float depth = lerp(0,finalDepthFade,saturate((depthEnv.g - dist)/depthFade));
	float alpha = saturate(depth);
	
    color0=float4(diffTex.rgb,alpha);
	
	//distance fog
	float insideFog = saturate((dist - fogParams.y) / fogParams.z)*fogColor.a;
	float3 atmFog = fogColor.rgb;
	color0.rgb = lerp(color0.rgb, atmFog, insideFog);
	
	//float2(0.5,0.5);
	float normalDistancing = saturate(IN.uv.z/30); //lerp(0.13,0.005,saturate(IN.uv.z/30));
	normalDistancing = lerp(0.3,0.05,normalDistancing)*fresDepthFadeDist.w;
    float2 normalOut = saturate(normalTex.xy*0.5 + 0.5);
	float brAvg = (reflTex.r+reflTex.g+reflTex.b)/3;
	float shine = brAvg*fresnel*brightness;
	
    color1=float4(normalOut,shine,normalDistancing);
    color2=color0;
    color3=float4(1-IN.uv.z/IN.uv.w,dist,0,0);
}
