#include "shadow.cg"
#include "filters.cg"
#include "common.cg"

struct VIn
{
	float4 p : POSITION;
	float3 n : NORMAL;
	float3 t : TANGENT;
	float2 uv : TEXCOORD0;
	
	#ifdef USE_2UV
	float2 uv2 : TEXCOORD1;
	#endif
	
	#ifdef USE_VC
	float4 c : COLOR;
	#endif
};

struct VOut
{
	float4 p : POSITION;
	float4 uv : TEXCOORD0;
	float3 wp : TEXCOORD1;
	float4 n : TEXCOORD2;
	float4 t : TEXCOORD3;
	float4 b : TEXCOORD4;
	float4 oLightPosition0 : TEXCOORD5;
	float4 oLightPosition1 : TEXCOORD6;
	float4 oLightPosition2 : TEXCOORD7;
	float4 oLightPosition3 : TEXCOORD8;
	
	#ifdef USE_2UV
	float2 uv2 : TEXCOORD9;
	#endif
	
	#ifdef USE_VC
	float4 vc : TEXCOORD9;
	#endif
};

struct PIn
{
	float4 uv : TEXCOORD0;
	float4 wp : TEXCOORD1;
	float4 n : TEXCOORD2;
	float4 t : TEXCOORD3;
	float4 b : TEXCOORD4;
	float4 LightPosition0 : TEXCOORD5;
	float4 LightPosition1 : TEXCOORD6;
	float4 LightPosition2 : TEXCOORD7;
	float4 LightPosition3 : TEXCOORD8;
	
	#ifdef USE_2UV
	float2 uv2 : TEXCOORD9;
	#endif
	
	#ifdef USE_VC
	float4 vc : TEXCOORD9;
	#endif
};


VOut main_vs(VIn IN,
	uniform float4x4 wMat,
	uniform float4x4 wvpMat,
	uniform float3 camPos,
	uniform float4x4 texWorldViewProjMatrix0,
	uniform float4x4 texWorldViewProjMatrix1,
	uniform float4x4 texWorldViewProjMatrix2,
	uniform float4x4 texWorldViewProjMatrix3
	)
{
	VOut OUT;
	OUT.wp.xyz = mul(wMat, IN.p).xyz;
	OUT.p = mul(wvpMat, IN.p);
	
	#ifdef USE_VC
	OUT.vc = IN.c;
	#endif
		
	#ifdef USE_2UV
	OUT.uv2.xy = IN.uv2.xy;
	#endif
	
	OUT.uv.xy = IN.uv.xy;
	OUT.uv.zw = OUT.p.zw;

	OUT.n.xyz = IN.n;
	OUT.t.xyz = IN.t;
	OUT.b.xyz = cross(IN.t, IN.n);

	float3 viewVec = camPos - IN.p.xyz;
	OUT.t.w = dot(viewVec, OUT.t.xyz);
	OUT.b.w = dot(viewVec, OUT.b.xyz);
	OUT.n.w = dot(viewVec, OUT.n.xyz);

	float4 wPos = float4(OUT.wp.xyz,1);
	OUT.oLightPosition0 = mul(texWorldViewProjMatrix0, wPos);
	OUT.oLightPosition1 = mul(texWorldViewProjMatrix1, wPos);
	OUT.oLightPosition2 = mul(texWorldViewProjMatrix2, wPos);
	OUT.oLightPosition3 = mul(texWorldViewProjMatrix3, wPos);

	return OUT;
}

void main_ps(
	PIn IN,
	
	#ifndef USE_2TEX
	uniform float3 diffuseColor,
	uniform float2 specularEnvWeight,
	#else
	uniform float uvSpreadScale,
	uniform float uv2Scale,
	uniform float4 spreadMinMaxW,
	uniform float vcBase,
	uniform float4 specularEnvWeight,	
	#endif
	
	uniform float4 lightDif0,
	uniform float4 lightPos0,
	uniform float4 specColorPow,
	uniform float brightness,
	uniform float uvScale,
	uniform float4 detailMinMaxScaleW,
	uniform float4 cubemapWPOffset,	
	uniform float3 camPos,
	uniform float ambientWeight,
	uniform float3 ambientColor,
	uniform float4 fogColor,
	uniform float4 fogParams,
	uniform float4x4 iTWMat,
	float2 screenSpace : WPOS,
	uniform sampler2D diffuseMap : register(s0),
	uniform sampler2D normalMap : register(s1),
	uniform sampler2D dispMap : register(s2),
	uniform sampler2D shadowMap0 : register(s3),
	uniform sampler2D shadowMap1 : register(s4),
	uniform sampler2D shadowMap2 : register(s5),
	uniform sampler2D shadowMap3 : register(s6),
	uniform sampler2D normalDetailMap : register(s7),
	uniform samplerCube envMap : register(s8),

	#ifdef USE_2TEX
	uniform sampler2D spreadMap : register(s9),
	uniform sampler2D diffuseMap2 : register(s10),
	uniform sampler2D normalMap2 : register(s11),
	#endif
	
	out float4 color0 : COLOR0,
	out float4 color1 : COLOR1,
	out float4 color2 : COLOR2,
	out float4 color3 : COLOR3
	)
{
	float uvDetailScale = uvScale*detailMinMaxScaleW.x;
	float uvMaxScale = uvScale*detailMinMaxScaleW.y;

	// direction
	float3 lightDir = normalize(lightPos0.xyz - (lightPos0.w * IN.wp.xyz));

	//pm offset
	float height = tex2D(dispMap, IN.uv.xy * uvScale).x;
	float3 vVec = float3(IN.t.w, IN.b.w, IN.n.w);
	float2 texCoordDispOffset = 0.01*(0.05 * height - 0.025) * normalize(vVec).xy;

	float2 texCoordBase = IN.uv.xy * uvScale + texCoordDispOffset;	
	float2 texCoordMax = IN.uv.xy * uvMaxScale + texCoordDispOffset;
	float2 texCoordDetail = IN.uv.xy * uvDetailScale + texCoordDispOffset;
	
	#ifdef USE_2UV
	float2 normalUv = IN.uv2.xy*2;//IN.uv2.xy * 0.01 + texCoordDispOffset;	
	#else
	float2 normalUv = texCoordBase;
	#endif
	
	float3 camDir = IN.wp.xyz - camPos;
	float dist = length(camDir);
	camDir = normalize(camDir);
	
	float detailW = clamp(dist/100, 0.5,1);
	detailMinMaxScaleW.w *= detailW;
	detailMinMaxScaleW.z *= 1-detailW;
	
	#ifdef USE_2TEX
	float2 texCoordBase2 = IN.uv.xy * uv2Scale;// + texCoordDispOffset;
	float2 texCoordSpread = IN.uv.xy * uvSpreadScale + texCoordDispOffset;
	float spread = getSpreadWeight(height, tex2D(spreadMap, texCoordSpread).g, IN.vc.w, spreadMinMaxW);
	//detailMinMaxScaleW.z *= 1-spread;
	float4 normalDetail = getNormals(normalMap, normalMap2, spread, normalDetailMap, normalUv, texCoordBase2, texCoordDetail, texCoordMax, detailMinMaxScaleW.zw);
	#else	
	float4 normalDetail = getNormal(normalMap, normalDetailMap, normalUv, texCoordDetail, texCoordMax, detailMinMaxScaleW.zw);
	#endif
	
	float3 normalTex = normalDetail.rgb;
	float detailN = normalDetail.w;
	float3 normal = transformNormal(IN.t.xyz, IN.b.xyz, IN.n.xyz, normalTex, iTWMat);

	#ifdef USE_2TEX
	float4 diffuseTex = lerp(tex2D(diffuseMap2, texCoordBase2), tex2D(diffuseMap, texCoordBase), spread);
	#else
	float4 diffuseTex = tex2D(diffuseMap, texCoordBase);
	diffuseTex.rgb *= diffuseColor;
	#endif
	
	float lighting = dot(lightDir, normal);

	float4 specular = getSpecular(lightDir, camDir, normal, specColorPow);

	float shadowing = getPssmShadow(lighting, IN.uv.z, shadowMap0, IN.LightPosition0, shadowMap1, IN.LightPosition1, shadowMap2, IN.LightPosition2, shadowMap3, IN.LightPosition3);

	#if defined(USE_VC) && !defined(USE_2TEX)
	ambientColor += saturate(IN.vc.rgb);
	ambientColor *=  IN.vc.a * ambientWeight;
	#elif defined(USE_2TEX)
	ambientColor *= ambientWeight;

	float3 vcGi = saturate((IN.vc.rgb-vcBase)*1/(1-vcBase));
	float3 vcDark = saturate((IN.vc.rgb+1-vcBase)*1/(vcBase));
	//ambientColor += saturate(1 - vcGi);
	ambientColor *= saturate(1 + vcDark);
	#else
	ambientColor *= ambientWeight;
	#endif
	
	float3 underShadow = max(shadowing.xxx,ambientColor);

	#if defined(USE_2TEX)
	float envWeight = lerp(specularEnvWeight.z, specularEnvWeight.w, spread);
	float specWeight = lerp(specularEnvWeight.x, specularEnvWeight.y, spread);
	#else
	float envWeight = specularEnvWeight.y;
	float specWeight = specularEnvWeight.x*shadowing;
	#endif
	
	float4 cmReflect = getCubemapReflection(envMap, camDir,normal,IN.wp.xyz,cubemapWPOffset);	
	diffuseTex.rgb = lerp(diffuseTex.rgb, cmReflect.rgb, cmReflect.w*envWeight*0.5);

	lighting = abs(max(lighting,lighting/2));
	float3 diffuse = lerp(ambientColor, lightDif0.rgb, underShadow*lighting)*detailN;
	
	float3 outColor = (diffuse*diffuseTex.rgb + specular.rgb*specWeight);
	outColor = applyFog(outColor, dist, fogParams, fogColor);	
	
	#if defined(USE_2TEX)
	color0 = float4(outColor,spread);
	#else
	color0 = float4(outColor, 1);
	#endif
	
	color1 = float4(0, 0, 0, brightness + saturate(specular.w / 2));
	color2 = float4(0, 0, 0, 1);
	color3 = float4(1 - IN.uv.z / IN.uv.w, dist, 0, 1);
}