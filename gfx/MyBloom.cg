float4 MyBloom_fp
    (
        float2 uv: TEXCOORD0,
        uniform sampler2D scene: register(s0),
	    uniform sampler2D bloomxy: register(s1)	     
    ) : COLOR
{
	float4 sharp = tex2D(scene,uv);
	float4 blur  = tex2D(bloomxy,uv);

	return ( sharp + blur);
}

float4 Brightcheck_fp
	(
		float2 uv: TEXCOORD0,
		uniform sampler2D scene: register(s0),
		uniform sampler2D sceneLum: register(s1),
		uniform sampler2D transLum: register(s2)
	) : COLOR
{
	float4 sharp = tex2D(scene,uv);
	sharp.rbg-=0.4-sharp.a*0.4;

	float matBrightness = tex2D(sceneLum,uv).a;
	float2 transBrightness = tex2D(transLum,uv).ba;
	
	matBrightness = lerp(matBrightness, transBrightness.x, transBrightness.y);
	
	//b > 0.8 -> 0.5-10
	matBrightness = max(matBrightness, (matBrightness-0.75)*30);

	sharp*=2*matBrightness;

	return  sharp;
}


static const float samples[11] =
{//stddev=2.0
0.01122447,
0.03383468,
0.05359061,
0.10097757,
0.16266632,

0.37241265,

0.16266632,
0.10097757,
0.05359061,
0.03383468,
0.01122447
};

static const float pos[11] =
{
-1.5,
-1.1,
-0.7,
-0.4,
-0.25,
 0,
 0.25,
 0.4,
 0.7,
 1.1,
 1.5
};

#define bloomSize 15;

float4 MyBloomX_fp
    (
         float2 uv: TEXCOORD0,
		 uniform float2 invTexSize,
         uniform sampler2D scene: register(s0),
		uniform sampler2D brightness: register(s1)
         
    ) : COLOR

{
	float t= 1 - tex2D(brightness, uv).r;
   float b=t*bloomSize + 0.1;

    float4 sum = 0;
   for (int i = 0; i < 11; i++)
   {
      sum += tex2D(scene, uv+ float2(pos[i],0)*invTexSize.xy*b) * samples[i];
   }
   return sum;

}

float4 MyBloomY_fp
    (
         float2 uv: TEXCOORD0,
		 uniform float2 invTexSize,
         uniform sampler2D blurX: register(s0),
		uniform sampler2D brightness: register(s1)
         
    ) : COLOR

{
	float t= 1 - tex2D(brightness, uv).r;
   float b=t*bloomSize + 0.1;
   
   float4 sum = 0;
   for (int i = 0; i < 11; i++)
   {
      sum += tex2D(blurX, uv +  float2(0,pos[i])*invTexSize.xy*b) * samples[i];
   }
   return sum;
}

float4 MyBloomYF_fp
    (
         float2 uv: TEXCOORD0,
		 uniform float2 invTexSize,
         uniform sampler2D blurX: register(s0),
	    uniform sampler2D brightness: register(s1)
         
    ) : COLOR

{
	float t= 1 - tex2D(brightness, uv).r;
   float b=t*bloomSize + 0.1;

   float4 sum = 0;
   for (int i = 0; i < 11; i++)
   {
      sum += tex2D(blurX, uv + float2(0,pos[i])*invTexSize.xy*b) * samples[i];
   }
   
   return sum*(t + 0.1);
}


#define BLUR_RADIUS 3

#define SMOKE_BLUR_RADIUS 0.005

static const float samplesSmoke[10] =
{//stddev=2.0
0.03122447,
0.05383468,
0.0759061,
0.10097757,
0.15266632,
0.15266632,
0.10097757,
0.07359061,
0.05383468,
0.03122447
};

static const float posSmoke[10] =
{
-1.8,
-1.2,
-0.7,
-0.4,
-0.25,
 0.25,
 0.4,
 0.7,
 1.2,
 1.8
};

float4 MySmokeBloomX_fp
    (
         float2 uv: TEXCOORD0,
         uniform sampler2D scene: register(s0)
         
    ) : COLOR

{
    float4 ini=tex2Dlod(scene, float4(uv,0,0));
    float4 sum = ini*0.15;
	float maxAlpha = ini.a;
	
	for (int i = 0; i < 10; i++)
	{
		float4 t=tex2Dlod(scene, float4(uv + float2(0,posSmoke[i]*SMOKE_BLUR_RADIUS),0,0));

		maxAlpha = max(maxAlpha,t.a);
		sum += t * samplesSmoke[i];
	}

	float s = sum.r + sum.g + sum.b;
   	sum.a = (s + sum.a + maxAlpha)/3;
	//if(ini.a>sum.a) sum=(ini+sum)/2; 
	return sum;
}


float4 MySmokeBloomY_fp
    (
         float2 uv: TEXCOORD0,
         uniform sampler2D blurX: register(s0)
         
    ) : COLOR

{
	float4 ini=tex2Dlod(blurX, float4(uv,0,0));
	float4 sum = ini*0.15;
	float maxAlpha = ini.a;

	for (int i = 0; i < 10; i++)
	{
		float4 t=tex2Dlod(blurX, float4(uv+ float2(posSmoke[i]*SMOKE_BLUR_RADIUS,0),0,0));

		maxAlpha = max(maxAlpha,t.a);
		sum +=t * samplesSmoke[i];
	}

		float s = sum.r + sum.g + sum.b;
   	sum.a = (s + sum.a + maxAlpha)/3;
	//if(ini.a>sum.a) sum=(ini+sum)/2; 

	return sum;
}