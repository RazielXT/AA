float4 MBFinalExtra_fp
    (
         float2 texCoord: TEXCOORD0,
	    uniform float4x4 invViewProjMatrix,
	    uniform float4x4 prevViewProjMatrix,
	    uniform float4x4 vpm,
         uniform sampler2D scene: register(s0),
	    uniform sampler2D depthMap: register(s1),
	    uniform sampler2D randMap: register(s2),
		uniform sampler2D shadeMap: register(s3),
	    uniform float3 radialHorizBlurShade,
		uniform float time
    ) : COLOR

{

float zOverW = 1 - tex2D(depthMap, texCoord).r;   

// H is the viewport position at this pixel in the range -1 to 1.   
float4 H = float4(texCoord.x * 2 - 1, (1 - texCoord.y) * 2 - 1,   
zOverW, 1);   

// Transform by the view-projection inverse.   
   float4 D = mul(invViewProjMatrix,H );


// Divide by w to get the world position.   
   float4 worldPos = D / D.w;  

 // Current viewport position   
   float4 currentPos = H;   

// Use the world position, and transform by the previous view-   
   // projection matrix.   
 float4 previousPos = mul(prevViewProjMatrix,worldPos);  
 
float ppp=previousPos.z;
// Convert to nonhomogeneous points [-1,1] by dividing by w.   
previousPos /= previousPos.w;   

// Use this frame's position and last frame's to compute the pixel   
   // velocity.   
   float2 velocity = (currentPos-previousPos).xy/30.f;  
velocity.x*=-1.5f;

float shade = lerp(1,tex2D(shadeMap,texCoord).r,radialHorizBlurShade.z);

float2 uvn = texCoord.yx*6;
uvn.x = uvn.x + time*6;
float3 noise = tex2D(randMap,uvn).r;
texCoord.y+=noise*0.02*radialHorizBlurShade.y;

float2 toCenter = normalize(texCoord-0.5)/-40*pow(texCoord-0.5,1.5);
velocity=lerp(velocity,toCenter,radialHorizBlurShade.x);
float offset=lerp(-4,0,radialHorizBlurShade.x);


float4 color = 0;

for(int i = 0; i<=9; i++)
color += tex2D(scene, saturate(texCoord+velocity*(i+offset)));
    
color = color / 9; 

return color*shade;
}