float4 MBFinal_fp
    (
        float2 texCoord: TEXCOORD0,
	    uniform float4x4 invViewProjMatrix,
	    uniform float4x4 prevViewProjMatrix,
	    uniform float4x4 vpm,
		uniform float4x4 myMatrix,
         uniform sampler2D scene: register(s0),
	    uniform sampler2D depthMap: register(s1),
		uniform sampler2D blur: register(s2)
    ) : COLOR

{
float4 cBlur = tex2D(blur,texCoord);
float zOverW = tex2D(depthMap, texCoord).r;   

// H is the viewport position at this pixel in the range -1 to 1.   
float4 H = float4(texCoord.x * 2 - 1, (1 - texCoord.y) * 2 - 1,   
zOverW, 1);   

// Transform by the view-projection inverse.   
   float4 D = mul(invViewProjMatrix,H );


// Divide by w to get the world position.   
   float4 worldPos = D / D.w;  

 // Current viewport position   
   float4 currentPos = H;   

// Use the world position, and transform by the previous view-   
   // projection matrix.   
 float4 previousPos = mul(prevViewProjMatrix,worldPos);  
 
// Convert to nonhomogeneous points [-1,1] by dividing by w.   
previousPos /= previousPos.w;   

// Use this frame's position and last frame's to compute the pixel   
   // velocity.   
   float2 velocity = (currentPos-previousPos)/30.f;  
velocity.x*=-1.5f;

//velocity=clamp(velocity,float2(0,0),float2(0.1,0.1));

float4 color = tex2D(scene, texCoord);   

color += tex2D(scene, saturate(texCoord+velocity));
color += tex2D(scene, saturate(texCoord+velocity*2));
color += tex2D(scene, saturate(texCoord+velocity*3));
color += tex2D(scene, saturate(texCoord+velocity*4));


color += tex2D(scene, saturate(texCoord-velocity));
color += tex2D(scene, saturate(texCoord-velocity*2));
color += tex2D(scene, saturate(texCoord-velocity*3));
color += tex2D(scene, saturate(texCoord-velocity*4));
    
color = color / 9; 

return color;
}