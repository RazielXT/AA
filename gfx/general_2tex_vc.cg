#define shTex 512
#define shFil 5

struct VIn
{
	float4 p : POSITION;
	float3 n : NORMAL;
	float3 t : TANGENT;
	float4 c : COLOR;
	float2 uv : TEXCOORD0;
	float2 uv2 : TEXCOORD1;
};

struct VOut
{
	float4 p : POSITION;
	float4 uv : TEXCOORD0;
	float4 wp : TEXCOORD1;
	float4 n : TEXCOORD2;
	float4 t : TEXCOORD3;
	float4 b : TEXCOORD4;
	float4 vc : TEXCOORD5;
	float4 oLightPosition0 : TEXCOORD6;
	float4 oLightPosition1 : TEXCOORD7;
	float4 oLightPosition2 : TEXCOORD8;
	float4 oLightPosition3 : TEXCOORD9;
};

struct PIn
{
	float4 uv : TEXCOORD0;
	float4 wp : TEXCOORD1;
	float4 n : TEXCOORD2;
	float4 t : TEXCOORD3;
	float4 b : TEXCOORD4;
	float4 vc : TEXCOORD5;
	float4 LightPosition0 : TEXCOORD6;
	float4 LightPosition1 : TEXCOORD7;
	float4 LightPosition2 : TEXCOORD8;
	float4 LightPosition3 : TEXCOORD9;
};


VOut diffuse_vs(VIn IN,
	uniform float4x4 wMat,
	uniform float4x4 wvpMat,
	uniform float3 camPos,
	uniform float4x4 texWorldViewProjMatrix0,
	uniform float4x4 texWorldViewProjMatrix1,
	uniform float4x4 texWorldViewProjMatrix2,
	uniform float4x4 texWorldViewProjMatrix3

	)
{
	VOut OUT;
	OUT.wp.xyz = mul(wMat, IN.p).xyz;
	OUT.wp.w = 1-IN.uv2.x;
	
	OUT.p = mul(wvpMat, IN.p);
	OUT.vc = IN.c;

	OUT.uv.xy = IN.uv.xy;
	OUT.uv.zw = OUT.p.zw;

	OUT.n.xyz = IN.n;
	OUT.t.xyz = IN.t;
	OUT.b.xyz = cross(IN.t, IN.n);

	float3 viewVec = camPos - IN.p.xyz;
	OUT.t.w = dot(viewVec, OUT.t.xyz);
	OUT.b.w = dot(viewVec, OUT.b.xyz);
	OUT.n.w = dot(viewVec, OUT.n.xyz);

	OUT.oLightPosition0 = mul(texWorldViewProjMatrix0, IN.p);
	OUT.oLightPosition1 = mul(texWorldViewProjMatrix1, IN.p);
	OUT.oLightPosition2 = mul(texWorldViewProjMatrix2, IN.p);
	OUT.oLightPosition3 = mul(texWorldViewProjMatrix3, IN.p);

	return OUT;
}

float shadowSmooth(sampler2D shadowMap, float4 shadowMapPos, float blur, float texRes)
{
	shadowMapPos = shadowMapPos / shadowMapPos.w;
	float4 vTexCoord = float4(shadowMapPos.xy, 1, 1);
	float fShadowTerm = 0.0f;
	float fLightDepth = shadowMapPos.z;
	float iSqrtSamples = shFil;


	float fRadius = (iSqrtSamples - 1.0f) / 2;
	for (float y = -fRadius; y <= fRadius; y++)
	{
		for (float x = -fRadius; x <= fRadius; x++)
		{
			float2 vOffset = 0;
			vOffset = float2(x, y);
			vOffset /= texRes;
			float2 vSamplePoint = vTexCoord.xy + vOffset;
			float fDepth = tex2Dlod(shadowMap, float4(vSamplePoint, 1, 1)).x + blur;
			float fSample = (fLightDepth <= fDepth);

			// Edge tap smoothing
			float xWeight = 1;
			float yWeight = 1;

			if (x == -fRadius)
				xWeight = 1 - frac(vTexCoord.x * texRes);
			else if (x == fRadius)
				xWeight = frac(vTexCoord.x *texRes);

			if (y == -fRadius)
				yWeight = 1 - frac(vTexCoord.y * texRes);
			else if (y == fRadius)
				yWeight = frac(vTexCoord.y *texRes);

			if (vSamplePoint.x > 1 || vSamplePoint.x < 0 ||
				vSamplePoint.y>1 || vSamplePoint.y < 0)
				fSample = 1;

			fShadowTerm += fSample * xWeight * yWeight;
		}
	}

	fShadowTerm /= ((iSqrtSamples - 1) * (iSqrtSamples - 1));


	//fShadowTerm=((tex2Dlod(shadowMap, float4(shadowMapPos.xy,0,0))).x+blur >= shadowMapPos.z) ? 1.0f : 0.0f;
	//return fShadowTerm;

	return fShadowTerm;
}

float3 whiteout_blend(float3 n1, float3 n2)
{
    float3 t = n1.xyz*float3( 2,  2, 2) + float3(-1, -1,  0);
    float3 u = n2.xyz*float3(-2, -2, 2) + float3( 1,  1, -1);
    float3 r = t*dot(t, u) - u*t.z;
    return normalize(r);
}

float3 color_blend2(float3 n1, float3 n2)
{
    n1 = n1;
    float3 a = n1 < 0.5 ? 1 : -1;
    float3 b = n1 < 0.5 ?  0 : 1;
    n1 =  2*a + n1;
    n2 = n2*a + b;
    float3 r = n1*n2 - a;
    return r;
}

float3 color_blend(float3 normalTex, float3 normalTex2)
{
	float3 r;
	r = (normalTex < 0.5 ? (2.0 * normalTex * normalTex2) : (1.0 - 2.0 * (1.0 - normalTex) * (1.0 - normalTex2)));
	return r;
}

void diffuse_ps(
	PIn IN,
	uniform float4 lightDif0,
	uniform float4 lightPos0,
	uniform float4 lightAtt0,
	uniform float4 matSpec0,
	uniform float matShininess,	
	uniform float uvScale,
	uniform float uvSpreadScale,
	uniform float uv2Scale,
	uniform float2 uvMinMaxDetailScale,
	uniform float specular2Weight,
	uniform float3 camPos,
	uniform float4 fogColor,
	uniform float4 fogParams,
	uniform float4x4 iTWMat,
	float2 screenSpace : WPOS,
	uniform sampler2D diffuseMap : register(s0),
	uniform sampler2D normalMap : register(s1),
	uniform sampler2D dispMap : register(s2),
	uniform sampler2D spreadMap : register(s3),
	uniform sampler2D diffuseMap2 : register(s4),
	uniform sampler2D normalMap2 : register(s5),
	uniform sampler2D shadowMap0 : register(s6),
	uniform sampler2D shadowMap1 : register(s7),
	uniform sampler2D shadowMap2 : register(s8),
	uniform sampler2D shadowMap3 : register(s9),
	uniform sampler2D normalDetailMap : register(s10),
	out float4 color0 : COLOR0,
	out float4 color1 : COLOR1,
	out float4 color2 : COLOR2,
	out float4 color3 : COLOR3
	)
{
	float uvDetailScale = uvScale*uvMinMaxDetailScale.x;
	float uvMaxScale = uvScale*uvMinMaxDetailScale.y;
	
	// direction
	float3 lightDir = normalize(lightPos0.xyz - (lightPos0.w * IN.wp.xyz));
	half lightDist = length(lightPos0.xyz - IN.wp.xyz) / lightAtt0.r;

	//pm offset
	float height = tex2D(dispMap, IN.uv.xy * uvScale).x;
	float3 vVec = float3(IN.t.w, IN.b.w, IN.n.w);
	float2 texCoordDisp = IN.uv.xy + (0.05 * height - 0.025) * normalize(vVec).xy;
	
	//spread
	//////////////////////////////////////////////////
	float spreadVC = IN.vc.w;
	float inside=smoothstep(0.25,1,spreadVC);
	//inside+=smoothstep(0.381385,1,spreadVC);

	//inside=pow(inside,1);

	float spread0=tex2D(spreadMap,texCoordDisp*uvSpreadScale).g;
	float spread1=tex2D(spreadMap, texCoordDisp*uvSpreadScale*3).g;

	spread0+=inside;
	spread0=pow(spread0,1+spreadVC);

	spread1-=(1-spreadVC)/2;
	spread1=pow(spread1,1+spreadVC);	

	spread0*=inside+spread1;
	spread0=smoothstep(0.121,0.3450,spread0);
	spreadVC=smoothstep(0.01,0.125,spreadVC);
	float inter=saturate(spread0*spreadVC+inside);
	///////////////////////////////////////////////////////

	
	//base normal+detail
	float3 normalTex = tex2D(normalMap, texCoordDisp*uvScale).rgb;
	float3 normalTex2 = tex2D(normalDetailMap, texCoordDisp*uvDetailScale).rgb;
	normalTex = color_blend(normalTex,normalTex2).rgb;
	
	//lerp with 2. normal
	normalTex2 = tex2D(normalMap2, texCoordDisp * uv2Scale).rgb;
	normalTex = lerp(normalTex2, normalTex, inter);

	//blend with max detail normal
	normalTex2 = tex2D(normalDetailMap, texCoordDisp*uvMaxScale).rgb;
	normalTex.rgb = lerp(normalTex.rgb, color_blend(normalTex,normalTex2).rgb, IN.wp.w);
	
	//lighting
	float3x3 tbn = float3x3(IN.t.xyz, IN.b.xyz, IN.n.xyz);
	float3 normal = mul(transpose(tbn), normalTex.xyz*2 - 1); // to object space
	normal = normalize(mul((float3x3)iTWMat, normal));

	float3 eyeDir = IN.wp.xyz - camPos.xyz;
	float dist = length(eyeDir);
	eyeDir = normalize(eyeDir);

	float4 diffuseTex = lerp(tex2D(diffuseMap2, texCoordDisp * uv2Scale), tex2D(diffuseMap, texCoordDisp * uvScale), inter);
	float diffuseLight = dot(lightDir, normal);

	float3 camDir = normalize(camPos - IN.wp.xyz);
	float3 halfVec = normalize(lightDir + camDir);
	float3 specular = pow(max(dot(normal, halfVec), 0), matShininess);

	
	//indirect specular
	tbn = transpose(tbn);

	float3 ld = float3(1, 0, 1);
	ld = mul(tbn, ld);
	float3 halfVec2 = normalize(ld + camDir);
	float3 specular2 = saturate(pow(max(dot(normal, halfVec2), 0), 64) / 3);

	ld = float3(-1, 0, 1);
	ld = mul(tbn, ld);
	float3 halfVec3 = normalize(ld + camDir);
	specular2 += saturate(pow(max(dot(normal, halfVec3), 0), 64) / 3);

	ld = float3(0, -1, 1);
	ld = mul(tbn, ld);
	float3 halfVec4 = normalize(ld + camDir);
	specular2 += saturate(pow(max(dot(normal, halfVec4), 0), 64) / 3);
	
	//shadow
	float norm = diffuseLight;
	float shadowing = 1.0f;
	
	if (norm < 0)
		shadowing = 0;
	else
	{

		float adder = 1;

		if (norm < 0.5)
			adder += (0.5 - norm) * 3;


		if (IN.uv.z <= 12)                                                                     
		{

			shadowing = shadowSmooth(shadowMap0, IN.LightPosition0, 0.0000015*adder, shTex);
		}
		else if (IN.uv.z <= 30)
		{
			shadowing = shadowSmooth(shadowMap1, IN.LightPosition1, 0.00000018*adder, shTex);
		}
		else if (IN.uv.z <= 130)
		{
			shadowing = shadowSmooth(shadowMap2, IN.LightPosition2, 0.0000002*adder, shTex);
		}
		else if (IN.uv.z <= 600)
		{
			shadowing = shadowSmooth(shadowMap3, IN.LightPosition3, 0.0000002, shTex);
		}

		if (norm < 0.5)
			shadowing *= norm * 2;

	}

	float ambient = 0.1;
	float3 vertexLight = ambient+(1-ambient)*saturate(IN.vc.rgb);
	
	//slight gi normal mapping
	diffuseLight = abs(max(diffuseLight,diffuseLight/2));

	float3 diffuseContrib = saturate(diffuseLight* lightDif0.rgb + vertexLight);
	float specWeight = lerp(specular2Weight, 1, inter);
	float3 specularContrib = ((specular + specular2*3) * matSpec0.rgb*specWeight );
	float3 rawColor = (diffuseContrib + specularContrib);
	
	float3 directLight = saturate(shadowing + vertexLight);
	
	float3 darkness = max(shadowing.xxx,vertexLight);
	float3 ambientLight = (vertexLight);
	float4 output = float4(rawColor*diffuseTex*lerp(ambientLight, max(directLight,vertexLight),darkness),1);
	
	//distance fog
	float insideFog = saturate((dist - fogParams.y) / fogParams.z)*fogColor.a;
	float3 atmFog = fogColor.rgb;
	output.rgb = lerp(output.rgb, atmFog, insideFog);

	color0 = output;
	color1 = float4(0.5, 0.5, saturate(matSpec0.a + specular.r / 2), 1);
	color2 = float4(0, 0, 0, 1);
	color3 = float4(IN.uv.z / IN.uv.w, IN.uv.z, 0, 1);
}