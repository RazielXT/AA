struct VIn
{
    float4 p : POSITION;
    float4 n : NORMAL;
    float3 t : TANGENT;
    float2 uv  : TEXCOORD0;
    float3 c : COLOR;
};

struct VOut
{
    float4 p : POSITION;
    float4 uv  : TEXCOORD0;
    float3 wp  : TEXCOORD1;
    float3 n : TEXCOORD2;
    float3 t : TEXCOORD3;
    float3 b : TEXCOORD6;
};

struct PIn
{
    float4 uv  : TEXCOORD0;
    float3 wp  : TEXCOORD1;
    float4 n : TEXCOORD2;
    float4 t : TEXCOORD3;
    float3 b : TEXCOORD6;
};


VOut wdiffuse_vs_op(VIn IN,
	uniform float4x4 wMat,
	uniform float4x4 wvpMat,
	uniform float3 camPos
)
{
    VOut OUT;
    float4 wpos = mul(wMat, IN.p);

	OUT.p = mul(wvpMat, IN.p);
	OUT.wp.xyz=wpos.xyz;
    
    OUT.uv.xy = IN.uv.xy;
    OUT.uv.zw = OUT.p.zw;

    OUT.n.xyz = IN.n;
    OUT.t.xyz = IN.t;
    OUT.b.xyz = cross(IN.t.xyz, IN.n.xyz);
	
    return OUT;
}

void wdiffuse_ps_op(
	PIn IN,
	uniform float2 scaleDiff,
	uniform float4 lightPos0,
	uniform float3 camPos,
	uniform float4 fogColor,
	uniform float4 fogParams,
	uniform float4x4 iTWMat,
	uniform sampler2D diffuseMap : register(s0),
	uniform sampler2D normalMap : register(s1),
	uniform sampler2D reflMap : register(s2),
	uniform sampler2D depthMap : register(s3),
	float2 screenSpace : WPOS,
	out float4 color0 : COLOR0,
	out float4 color1 : COLOR1,
	out float4 color2 : COLOR2,
	out float4 color3 : COLOR3
)
{
	float finalDepthFade = 0.5;
	float depthFade = 15;
	float normalScale = 3;
	float2 texCoord = IN.uv.xy;
	
    // direction
    float3 ld0 = lightPos0.xyz;
	
	float3 normalTex = tex2D(normalMap, texCoord*scaleDiff*normalScale).rgb;

    texCoord = IN.uv.xy;
	
	float4 diffTex = tex2D(diffuseMap, texCoord*scaleDiff);
	diffTex.a = 0.5;
	
    float3x3 tbn = float3x3(IN.t.xyz,IN.b.xyz, IN.n.xyz);
    float3 normal = mul(transpose(tbn), normalTex.xyz * 2 - 1); // to object space
    normal = normalize(mul((float3x3)iTWMat, normal));
    
    float diffuse = dot(ld0, normal)*0.5 + 0.5;
    
	float3 camDir = camPos - IN.wp.xyz;
	float dist = length(camDir);
	camDir = normalize(camDir);
	
	float3 Ru = normalize(-camDir);
	float3 Rn = normalize(normal.xyz);
	float3 Rr = reflect( Ru, Rn );
	float m = 2.0 * sqrt( Rr.x*Rr.x + Rr.y*Rr.y + (Rr.z+1.0)*(Rr.z+1.0) );
	float2 reflUV = float2(Rr.x/m + 0.5, Rr.y/m + 0.5);
	float3 reflectionTex = tex2D(reflMap,reflUV).rgb;
	
	float fresnel = pow(1 - abs(dot(camDir, normal)), 3);

	//fade depth
	float2 depthTexCoord=screenSpace/float2(1280.0f,768.0f);
	float3 depthEnv=tex2D(depthMap,depthTexCoord).rgb;  
	float depth = lerp(0,finalDepthFade,saturate((depthEnv.g - dist)/depthFade));
	float alpha = saturate(depth);
	
    color0=float4(diffTex.rgb*reflectionTex,alpha);
	
	//distance fog
	float insideFog = saturate((dist - fogParams.y) / fogParams.z)*fogColor.a;
	float3 atmFog = fogColor.rgb;
	color0.rgb = lerp(color0.rgb, atmFog, insideFog);
	
	//float2(0.5,0.5);
	float normalDistancing = lerp(0.13,0.005,saturate(IN.uv.z/30));
    float2 normalOut = normalTex.xy*normalDistancing;	
	float shine = reflectionTex.r*fresnel*0.2;
	
    color1=float4(normalOut,shine,alpha);
    color2=pow(fresnel*1.5,2);
    color3=float4(1-IN.uv.z/IN.uv.w,dist,0,0);
}
