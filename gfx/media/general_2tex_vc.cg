#include "common.cg"

#define shTex 512
#define shFil 5

struct VIn
{
	float4 p : POSITION;
	float3 n : NORMAL;
	float3 t : TANGENT;
	float4 c : COLOR;
	float2 uv : TEXCOORD0;
	float2 uv2 : TEXCOORD1;
};

struct VOut
{
	float4 p : POSITION;
	float4 uv : TEXCOORD0;
	float4 wp : TEXCOORD1;
	float4 n : TEXCOORD2;
	float4 t : TEXCOORD3;
	float4 b : TEXCOORD4;
	float4 vc : TEXCOORD5;
	float4 oLightPosition0 : TEXCOORD6;
	float4 oLightPosition1 : TEXCOORD7;
	float4 oLightPosition2 : TEXCOORD8;
	float4 oLightPosition3 : TEXCOORD9;
};

struct PIn
{
	float4 uv : TEXCOORD0;
	float4 wp : TEXCOORD1;
	float4 n : TEXCOORD2;
	float4 t : TEXCOORD3;
	float4 b : TEXCOORD4;
	float4 vc : TEXCOORD5;
	float4 LightPosition0 : TEXCOORD6;
	float4 LightPosition1 : TEXCOORD7;
	float4 LightPosition2 : TEXCOORD8;
	float4 LightPosition3 : TEXCOORD9;
};


VOut diffuse_vs(VIn IN,
	uniform float4x4 wMat,
	uniform float4x4 wvpMat,
	uniform float3 camPos,
	uniform float4x4 texWorldViewProjMatrix0,
	uniform float4x4 texWorldViewProjMatrix1,
	uniform float4x4 texWorldViewProjMatrix2,
	uniform float4x4 texWorldViewProjMatrix3

	)
{
	VOut OUT;
	OUT.wp.xyz = mul(wMat, IN.p).xyz;
	OUT.wp.w = 1-IN.uv2.x;
	
	OUT.p = mul(wvpMat, IN.p);
	OUT.vc = IN.c;

	OUT.uv.xy = IN.uv.xy;
	OUT.uv.zw = OUT.p.zw;

	OUT.n.xyz = IN.n;
	OUT.t.xyz = IN.t;
	OUT.b.xyz = cross(IN.t, IN.n);

	float3 viewVec = camPos - IN.p.xyz;
	OUT.t.w = dot(viewVec, OUT.t.xyz);
	OUT.b.w = dot(viewVec, OUT.b.xyz);
	OUT.n.w = dot(viewVec, OUT.n.xyz);

	OUT.oLightPosition0 = mul(texWorldViewProjMatrix0, IN.p);
	OUT.oLightPosition1 = mul(texWorldViewProjMatrix1, IN.p);
	OUT.oLightPosition2 = mul(texWorldViewProjMatrix2, IN.p);
	OUT.oLightPosition3 = mul(texWorldViewProjMatrix3, IN.p);

	return OUT;
}

float shadowSmooth(sampler2D shadowMap, float4 shadowMapPos, float blur, float texRes)
{
	shadowMapPos = shadowMapPos / shadowMapPos.w;
	float4 vTexCoord = float4(shadowMapPos.xy, 1, 1);
	float fShadowTerm = 0.0f;
	float fLightDepth = shadowMapPos.z;
	float iSqrtSamples = shFil;


	float fRadius = (iSqrtSamples - 1.0f) / 2;
	for (float y = -fRadius; y <= fRadius; y++)
	{
		for (float x = -fRadius; x <= fRadius; x++)
		{
			float2 vOffset = 0;
			vOffset = float2(x, y);
			vOffset /= texRes;
			float2 vSamplePoint = vTexCoord.xy + vOffset;
			float fDepth = tex2Dlod(shadowMap, float4(vSamplePoint, 1, 1)).x + blur;
			float fSample = (fLightDepth <= fDepth);

			// Edge tap smoothing
			float xWeight = 1;
			float yWeight = 1;

			if (x == -fRadius)
				xWeight = 1 - frac(vTexCoord.x * texRes);
			else if (x == fRadius)
				xWeight = frac(vTexCoord.x *texRes);

			if (y == -fRadius)
				yWeight = 1 - frac(vTexCoord.y * texRes);
			else if (y == fRadius)
				yWeight = frac(vTexCoord.y *texRes);

			if (vSamplePoint.x > 1 || vSamplePoint.x < 0 ||
				vSamplePoint.y>1 || vSamplePoint.y < 0)
				fSample = 1;

			fShadowTerm += fSample * xWeight * yWeight;
		}
	}

	fShadowTerm /= ((iSqrtSamples - 1) * (iSqrtSamples - 1));


	//fShadowTerm=((tex2Dlod(shadowMap, float4(shadowMapPos.xy,0,0))).x+blur >= shadowMapPos.z) ? 1.0f : 0.0f;
	//return fShadowTerm;

	return fShadowTerm;
}

void diffuse_ps(
	PIn IN,
	uniform float4 lightDif0,
	uniform float4 lightPos0,
	uniform float4 matSpec0,
	uniform float matShininess,	
	uniform float uvScale,
	uniform float uvSpreadScale,
	uniform float uv2Scale,
	uniform float4 spreadMinMaxW,
	uniform float2 uvMinMaxDetailScale,
	uniform float2 uvMinMaxDetailW,
	uniform float4 cubemapWPOffset,
	uniform float4 specularEnvWeight,
	uniform float3 camPos,
	uniform float ambientWeight,
	uniform float3 ambientColor,
	uniform float4 fogColor,
	uniform float4 fogParams,
	uniform float vcBase,
	uniform float4x4 iTWMat,
	float2 screenSpace : WPOS,
	uniform sampler2D diffuseMap : register(s0),
	uniform sampler2D normalMap : register(s1),
	uniform sampler2D dispMap : register(s2),
	uniform sampler2D spreadMap : register(s3),
	uniform sampler2D diffuseMap2 : register(s4),
	uniform sampler2D normalMap2 : register(s5),
	uniform sampler2D shadowMap0 : register(s6),
	uniform sampler2D shadowMap1 : register(s7),
	uniform sampler2D shadowMap2 : register(s8),
	uniform sampler2D shadowMap3 : register(s9),
	uniform sampler2D normalDetailMap : register(s10),
	uniform samplerCube envMap : register(s11),
	out float4 color0 : COLOR0,
	out float4 color1 : COLOR1,
	out float4 color2 : COLOR2,
	out float4 color3 : COLOR3
	)
{
	float uvDetailScale = uvScale*uvMinMaxDetailScale.x+min(cubemapWPOffset.x,0);
	float uvMaxScale = uvScale*uvMinMaxDetailScale.y;
	
	// direction
	float3 lightDir = normalize(lightPos0.xyz - (lightPos0.w * IN.wp.xyz));

	//pm offset
	float height = tex2D(dispMap, IN.uv.xy * uvScale).x;
	float3 vVec = float3(IN.t.w, IN.b.w, IN.n.w);
	float2 texCoordDispOffset = 0;//(0.05 * height - 0.025) * normalize(vVec).xy;
	
	float2 texCoordBase = IN.uv.xy * uvScale + texCoordDispOffset;
	float2 texCoordBase2 = IN.uv.xy * uv2Scale;
	float2 texCoordMax = IN.uv.xy * uvMaxScale;
	float2 texCoordDetail = IN.uv.xy * uvDetailScale + texCoordDispOffset;
	float2 texCoordSpread = IN.uv.xy * uvSpreadScale + texCoordDispOffset;

	//spread
	//////////////////////////////////////////////////
	float spreadVC = IN.vc.w;
	float inside=smoothstep(spreadMinMaxW.x,spreadMinMaxW.y,spreadVC);
	//inside+=smoothstep(0.381385,1,spreadVC);

	//inside=pow(inside,1);

	float spread1=tex2D(dispMap, texCoordBase).x;
	float spread0=tex2D(spreadMap, texCoordSpread).g;

	spread0+=inside;
	spread0=pow(spread0,1+spreadVC);

	spread1-=(1-spreadVC)/2;
	spread1=pow(spread1,1+spreadVC);	

	spread0*=inside+spread1;
	spread0=smoothstep(0.121*spreadMinMaxW.z,0.3450*spreadMinMaxW.w,spread0);
	spreadVC=smoothstep(0.01,0.125,spreadVC);
	float inter=saturate(spread0*spreadVC+inside);
	///////////////////////////////////////////////////////

	
	//base normal+detail
	float3 normalTex = tex2D(normalMap, texCoordBase).rgb;
	float3 normalTex2 = tex2D(normalDetailMap, texCoordDetail).rgb;
	//normalTex = color_blend(normalTex,normalTex2).rgb;
	float detailN = lerp(1,pow(normalTex2.r + normalTex2.g,2),uvMinMaxDetailW.x);
	
	//lerp with 2. normal
	normalTex2 = tex2D(normalMap2, texCoordBase2).rgb;
	normalTex = lerp(normalTex2, normalTex, inter);

	//blend with max detail normal
	normalTex2 = tex2D(normalDetailMap, texCoordMax).rgb;
	//normalTex = lerp(normalTex, color_blend(normalTex,normalTex2).rgb,uvMinMaxDetailW.y);//lerp(normalTex.rgb, color_blend(normalTex,normalTex2).rgb, IN.wp.w);
	
	detailN = lerp(detailN,pow(normalTex2.r + normalTex2.g,2),uvMinMaxDetailW.y);
	
	//lighting
	float3x3 tbn = float3x3(IN.t.xyz, IN.b.xyz, IN.n.xyz);
	float3 normal = mul(transpose(tbn), normalTex.xyz*2 - 1); // to object space
	normal = normalize(mul((float3x3)iTWMat, normal));

	float4 diffuseTex = lerp(tex2D(diffuseMap2, texCoordBase2), tex2D(diffuseMap, texCoordBase), inter);
	float diffuseLight = dot(lightDir, normal);
	
	float3 camDir = IN.wp.xyz - camPos;
	float dist = length(camDir);
	camDir = normalize(camDir);
	float3 halfVec = normalize(lightDir - camDir);
	float3 specular = pow(max(dot(normal, halfVec), 0), matShininess);
	
	//shadow
	float norm = diffuseLight;
	float shadowing = 1.0f;
	
	if (norm < 0)
		shadowing = 0;
	else
	{
		float adder = 1;

		if (norm < 0.5)
			adder += (0.5 - norm) * shFil*5;

		if (IN.uv.z <= 12)                                                                     
		{
			shadowing = shadowSmooth(shadowMap0, IN.LightPosition0, 0.0000015*adder, shTex);
		}
		else if (IN.uv.z <= 30)
		{
			shadowing = shadowSmooth(shadowMap1, IN.LightPosition1, 0.000000235*adder, shTex);
		}
		else if (IN.uv.z <= 120)
		{
			shadowing = shadowSmooth(shadowMap2, IN.LightPosition2, 0.00000037*adder, shTex);
		}
		else if (IN.uv.z <= 600)
		{
			shadowing = shadowSmooth(shadowMap3, IN.LightPosition3, 0.00000032, shTex);
		}

		if (norm < 0.5)
			shadowing *= norm * 2;
	}

	ambientColor *= ambientWeight;

	float3 vcGi = saturate((IN.vc.rgb-vcBase)*1/(1-vcBase));
	float3 vcDark = saturate((IN.vc.rgb+1-vcBase)*1/(vcBase));
	
	ambientColor += vcGi;
	ambientColor *= vcDark;
	
	float3 underShadow = max(shadowing.xxx,ambientColor);
	
	float4 cmReflect = getCubemapReflection(envMap, camDir,normal,IN.wp.xyz,cubemapWPOffset);
	float envWeight = lerp(specularEnvWeight.z, specularEnvWeight.w, inter);
	diffuseTex.rgb = lerp(diffuseTex.rgb, cmReflect.rgb, cmReflect.w*envWeight*0.5);	
	
	diffuseLight = abs(max(diffuseLight,diffuseLight/2));		
	float3 diffuse = lerp(ambientColor, lightDif0.rgb, underShadow*diffuseLight)*detailN;
	
	float specWeight = lerp(specularEnvWeight.x, specularEnvWeight.y, inter);
	float3 specularContrib = (specular* matSpec0.rgb*specWeight );
	float3 output = (diffuse*diffuseTex + specularContrib);

	//distance fog
	float insideFog = saturate((dist - fogParams.y) / fogParams.z)*fogColor.a;
	float3 atmFog = fogColor.rgb;
	output.rgb = lerp(output.rgb, atmFog, insideFog);

	color0 = float4(output,1);
	color1 = float4(0.5, 0.5, 0.5, saturate(matSpec0.a + specular.r / 2));
	color2 = float4(0, 0, 0, 1);
	color3 = float4(1 - IN.uv.z / IN.uv.w, dist, 0, 1);
}