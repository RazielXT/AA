struct VIn
{
    float4 p : POSITION;
    float4 n : NORMAL;
    float3 t : TANGENT;
    float2 uv  : TEXCOORD0;
    float4 c : COLOR;
};

struct VOut
{
    float4 p : POSITION;
    float4 uv  : TEXCOORD0;
    float4 wp  : TEXCOORD1;
    float3 n : TEXCOORD2;
    float3 t : TEXCOORD3;
    float3 b : TEXCOORD6;
};

struct PIn
{
    float4 uv  : TEXCOORD0;
    float4 wp  : TEXCOORD1;
    float4 n : TEXCOORD2;
    float4 t : TEXCOORD3;
    float3 b : TEXCOORD6;
};


VOut wdiffuse_vs_op(VIn IN,
	uniform float4x4 wMat,
	uniform float4x4 vpMat
)
{
    VOut OUT;
    float4 wpos = mul(wMat, IN.p);
	float4 wnor = mul(wMat, IN.n);

	float shadow = IN.c.r;
	float foam = IN.c.a;
	
	OUT.p = mul(vpMat, wpos);

	OUT.wp.xyz=wpos.xyz;
    OUT.uv.xy = IN.uv.xy;
    OUT.uv.zw = float2(foam,shadow);
	
    OUT.n.xyz = IN.n;
    OUT.t.xyz = IN.t;
    OUT.b.xyz = cross(IN.t.xyz, IN.n.xyz);
	
    return OUT;
}

float3 color_blend(float3 normalTex, float3 normalTex2)
{
	float3 r;
	r = (normalTex < 0.5 ? (2.0 * normalTex * normalTex2) : (1.0 - 2.0 * (1.0 - normalTex) * (1.0 - normalTex2)));
	return r;
}

void wdiffuse_ps_op(
	PIn IN,
	uniform float scrollTime,
	uniform float speed,
	uniform float2 scaleDiff,
	uniform float4 lightPos0,
	uniform float3 camPos,
	uniform float playerSpeed,
	uniform float4 fogColor,
	uniform float4 fogParams,
	uniform float4x4 iTWMat,
	uniform sampler2D diffuseMap : register(s0),
	uniform sampler2D normalMap : register(s1),
	uniform sampler2D foamMap : register(s2),
	uniform sampler2D reflMap : register(s3),
	float2 screenSpace : WPOS,
	out float4 color0 : COLOR0,
	out float4 color1 : COLOR1,
	out float4 color2 : COLOR2,
	out float4 color3 : COLOR3
)
{
    float foamScale = 5;
	float normalScale = 0.3;
	float normalSpeed = 22.5;
	float2 texCoord = IN.uv.xy;
    float speedUV=speed*0.02;
	
    float foamTerm=IN.uv.z;//*0.75+0.25;
	
    // direction
    float3 ld0 = lightPos0.xyz;
    
    texCoord.y += scrollTime * speedUV*normalSpeed;
    
	float3 normalTex = tex2D(normalMap, texCoord*scaleDiff*normalScale).rgb;
        
	texCoord.x += 0.75;
	texCoord *= 0.5;
    texCoord.y += scrollTime * speedUV * 2;
    
	float3 normalTex2 = tex2D(normalMap, texCoord*scaleDiff*normalScale*0.9).rgb;
	
	normalTex = color_blend(normalTex,normalTex2);
	
    texCoord = IN.uv.xy;
    
	float2 diffUV = texCoord;
    diffUV.y += scrollTime * speedUV * 15;
	float3 diffTex = tex2D(diffuseMap, diffUV*scaleDiff*0.1).rgb;
		
	diffUV.y += scrollTime * speedUV * 15;
	diffTex = diffTex*0.5 + tex2D(diffuseMap, diffUV*scaleDiff*0.1).rgb*0.5;
	
    float3x3 tbn = float3x3(IN.t.xyz,IN.b.xyz, IN.n.xyz);
    float3 normal = mul(transpose(tbn), normalTex.xyz * 2 - 1); // to object space
    normal = normalize(mul((float3x3)iTWMat, normal));
    
    float diffuse = abs(dot(ld0, normal))*0.75 + 0.25;
    
	texCoord *= 1.5;
	texCoord.x += 0.5;
    texCoord.y += scrollTime * speedUV;
    
    float3 foamTex = tex2D(foamMap, texCoord*scaleDiff*foamScale).rgb*foamTerm;
	
	float3 camDir = camPos - IN.wp.xyz;
	float dist = length(camDir);
	camDir = normalize(camDir);
	
	float3 Ru = normalize(-camDir);
	float3 Rn = normalize(normal.xyz);
	float3 Rr = reflect( Ru, Rn );
	float m = 2.0 * sqrt( Rr.x*Rr.x + Rr.y*Rr.y + (Rr.z+1.0)*(Rr.z+1.0) );

	float2 reflUV = float2(Rr.x/m + 0.5, Rr.y/m + 0.5);
	float3 reflectionTex = tex2D(reflMap,reflUV).rgb;
	
	float fresnel = pow(1 - abs(dot(camDir, normal)), 2);

    float3 waterEffects = reflectionTex;
    float3 waterDiffuse = diffTex.rgb*diffuse*2;//lerp(diffTex.rgb,foamTex.rgb,foamTerm);
	
	float alpha = saturate(foamTerm + reflectionTex.r*0.5 + 0.15 + fresnel*0.2);
	
    color0 = float4((waterDiffuse*waterEffects + foamTex),alpha);
	
	//distance fog
	float insideFog = saturate((dist - fogParams.y) / fogParams.z)*fogColor.a;
	float3 atmFog = fogColor.rgb;
	color0.rgb = lerp(color0.rgb, atmFog, insideFog);
	
	float shine = (reflectionTex.r+fresnel)*0.25 + 1;
	
    color1=float4(0.5,0.5,shine,alpha+shine);
    color2=pow(fresnel*1.5 + 1,2);
    color3=0;
}
