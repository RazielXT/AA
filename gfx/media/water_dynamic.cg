#include "common.cg"

struct VIn
{
    float4 p : POSITION;
    float4 n : NORMAL;
    float3 t : TANGENT;
    float2 uv  : TEXCOORD0;
    float3 c : COLOR;
};

struct VOut
{
    float4 p : POSITION;
    float4 uv  : TEXCOORD0;
    float4 wp  : TEXCOORD1;
    float3 n : TEXCOORD2;
    float3 t : TEXCOORD3;
    float3 b : TEXCOORD4;
	float3 waveNormal : TEXCOORD5;
};

struct PIn
{
    float4 uv  : TEXCOORD0;
    float4 wp  : TEXCOORD1;
    float4 n : TEXCOORD2;
    float4 t : TEXCOORD3;
    float3 b : TEXCOORD4;
	float3 waveNormal : TEXCOORD5;
};

float4 waveFunc(float2 waveSizeSpeed, float time, sampler2D dispMap, float2 inUv)
{
	float waveScale = 4;
	float waveScale2 = 7;
    float waveSize = waveSizeSpeed.x;
	float waveSpeed = waveSizeSpeed.y;
	
	float2 uv = inUv/waveScale;
	uv.y += time*waveSpeed/2.25;
	uv.x*=2;
	float4 wMapSmall = tex2D(dispMap, uv);

	uv = inUv/waveScale2;
	uv.y += time*waveSpeed;
	uv.x*=1;
	float4 wMapBig = tex2D(dispMap, uv);
	
	float add = (wMapSmall.r+wMapBig.r*2)*waveSize;
	
	return float4(uv, add, wMapSmall.x + wMapBig.x);
}

VOut wdiffuse_vs_op(VIn IN,
	uniform float4x4 wMat,
	uniform float4x4 vpMat,
	uniform float time,
	uniform float3 waveSizeSpeedNormalW,
	uniform sampler2D dispMap : register(s0),
	uniform sampler2D normMap : register(s1)
)
{
    VOut OUT;
    float4 wpos = mul(wMat, IN.p);
	float4 wnor = mul(wMat, IN.n);
	
	//xy = wave map uv, z = add height, w = direct height map 
	float4 waveParams = waveFunc(waveSizeSpeedNormalW.xy, time, dispMap, IN.uv.xy); 

	wpos.y += waveParams.z;
	float3 wMapNormal = tex2D(normMap, waveParams.xy).rgb;
	
	float foamDirect = saturate(3*IN.c.g + IN.c.b*2);
	foamDirect += IN.c.r;
	
	OUT.p = mul(vpMat, wpos);

	OUT.wp.xyz=wpos.xyz;
    
    OUT.uv.xy = IN.uv.xy;
    OUT.uv.zw=OUT.p.zw;
    
	OUT.waveNormal = wMapNormal;
	
	wMapNormal = waveSizeSpeedNormalW.z*wMapNormal + IN.n.rgb;

    OUT.n.xyz = wMapNormal;
    OUT.t.xyz = IN.t;
    OUT.b.xyz = cross(IN.t.xyz, wMapNormal);
	
	OUT.wp.w = max(waveParams.w/2,foamDirect);//OUT.vVec.w*add*IN.c.r/(waveSize*1.5);

    return OUT;
}

float3 avg_blend(float3 color0, float3 color1)
{
	return (color0 + color1)/2;
}

void wdiffuse_ps_op(
	PIn IN,
	uniform float4 diffuseColor,
	uniform float scrollTime,
	uniform float speed,
	uniform float clearDist,
	uniform float2 scaleDiff,
	uniform float4 lightPos0,
	uniform float3 camPos,
	uniform float4 fogColor,
	uniform float4 fogParams,
	uniform float4 screenSize,
	uniform float4 cubemapWPOffset,	
	uniform float4x4 iTWMat,
	uniform sampler2D normalMap : register(s2),
	uniform sampler2D foamMap : register(s3),
#ifdef REFL_CUBE
	uniform samplerCube reflMap : register(s4),
#else
	uniform sampler2D reflMap : register(s4),
#endif
	uniform sampler2D depthMap : register(s5),
	float2 screenSpace : WPOS,
	out float4 color0 : COLOR0,
	out float4 color1 : COLOR1,
	out float4 color2 : COLOR2,
	out float4 color3 : COLOR3
)
{
    float foamScale = 5;
	float normalScale = 1;
	float normalSpeed = 2.5;
	float2 texCoord = IN.uv.xy;
    float speedUV=speed*0.2;
    float foamTerm=IN.wp.w;//*0.75+0.25;
	
    // direction
    float3 ld0 = lightPos0.xyz;//normalize(lightPos0.xyz - (lightPos0.w * IN.wp.xyz));
    //ld0.xz = lerp(ld0.xz,-ld0.xz,foamTerm);  
    
    texCoord.y += scrollTime * speedUV*normalSpeed;
    
	float3 detailNormalTex = tex2D(normalMap, texCoord*scaleDiff*normalScale*5).rgb;
	
	texCoord.y += scrollTime * speedUV * 0.25;
	
    float3 normalTex = tex2D(normalMap, texCoord*scaleDiff*normalScale).rgb;
    
	texCoord.x += 0.5 + scrollTime*0.001;
	texCoord.y += scrollTime * speedUV * 0.25;
	float wLerp = abs(fmod(scrollTime*0.4,1)-0.5)*2;
	float3 normalTex2 = lerp(normalTex, tex2D(normalMap, texCoord*scaleDiff*normalScale).rgb,wLerp);
	
    normalTex = normalTex2;//avg_blend(normalTex, normalTex2);

	normalTex = avg_blend(normalTex, detailNormalTex);
	
    texCoord += float2(0.5,scrollTime * speedUV*normalSpeed);

    //normalTex.z=1;
    normalTex = color_blend(normalTex,IN.waveNormal);//*0.01 + normalTex2;
    
    texCoord = IN.uv.xy;
    
	float2 diffUV = texCoord;
    diffUV.y += scrollTime * speedUV * 3;

    float3x3 tbn = float3x3(IN.t.xyz,IN.b.xyz, IN.n.xyz);
    float3 normal = mul(transpose(tbn), normalTex.xyz * 2 - 1); // to object space
    normal = normalize(mul((float3x3)iTWMat, normal));
    
    float diffuse = abs(dot(ld0, normal)*0.5 + 0.5);
    
    texCoord.y += scrollTime * speedUV;
    
    float3 foamTex = tex2D(foamMap, texCoord*scaleDiff*foamScale/2).rgb*foamTerm;
	texCoord.y += scrollTime * speedUV * 0.5;
    texCoord.x += 0.25;
	
    foamTex += tex2D(foamMap, texCoord*scaleDiff*foamScale).rgb*foamTerm;
	foamTex/=2;
	
	float3 camDir = camPos - IN.wp.xyz;
	float dist = length(camDir);
	camDir = normalize(camDir);
	
#if defined(REFL_SPHERE)
	float3 Ru = normalize(-camDir);
	float3 Rn = normalize(normal.xyz);
	float3 Rr = reflect( Ru, Rn );
	float m = 2.0 * sqrt( Rr.x*Rr.x + Rr.y*Rr.y + (Rr.z+1.0)*(Rr.z+1.0) );

	float2 reflUV = float2(Rr.x/m + 0.5, Rr.y/m + 0.5);
	float3 reflectionTex = tex2D(reflMap,reflUV).rgb;
#elif defined(REFL_RTT)
	float3 reflectionTex = tex2D(reflMap, screenSpace/screenSize.xy + normal.xy*float2(0.1,0.01)).rgb;
#else
	float3 reflectionTex = getCubemapReflection(reflMap, -camDir,normal,IN.wp.xyz,cubemapWPOffset).rgb;
#endif
	
	float fresnel = pow(1 - abs(dot(camDir, normal)), 3);

    float3 waterDiffuse = lerp(diffuseColor.rgb,foamTex.rgb,foamTerm)*diffuse;
	
	float3 waterColor = lerp(waterDiffuse, reflectionTex.rgb, fresnel);
	
	//water depth
	float2 depthTexCoord=screenSpace/screenSize.xy;
	float3 depthEnv=tex2D(depthMap,depthTexCoord).rgb;  
	float depth = saturate((depthEnv.g - dist)/clearDist);
	float depthMax = saturate(depth*0.1*clearDist);
	float alpha = (0.75*depth + foamTerm*foamTex.r + fresnel*depthMax*0.5);
	
    color0=float4(waterColor,alpha);
	
	//distance fog
	float insideFog = saturate((dist - fogParams.y) / fogParams.z)*fogColor.a;
	float3 atmFog = fogColor.rgb;
	color0.rgb = lerp(color0.rgb, atmFog, insideFog);
	
	//float2(0.5,0.5);
	float normalDistancing = lerp(0.3,0.05,saturate(IN.uv.z/30));
    float2 normalOut = (normalTex.xy-0.5)*normalDistancing + 0.5;	
	float shine = reflectionTex.r*fresnel*depthMax*0.1;
	
    color1=float4(normalOut,shine,1);
    color2=pow(fresnel*1.5,2);
    color3=float4(1-IN.uv.z/IN.uv.w,dist,0,0);
}

struct VOutLite
{
    float4 p : POSITION;
    float4 wp  : TEXCOORD0;
};

struct PInLite
{
    float4 wp  : TEXCOORD0;
};

VOutLite wdiffuseLite_vs_op(VIn IN,
	uniform float4x4 wMat,
	uniform float4x4 vpMat,
	uniform float time,
	uniform float3 waveSizeSpeedNormalW,
	uniform sampler2D dispMap : register(s0)
)
{
    VOutLite OUT;
    float4 wpos = mul(wMat, IN.p);
	
	//xy = wave map uv, z = add height, w = direct height map 
	float4 waveParams = waveFunc(waveSizeSpeedNormalW.xy, time, dispMap, IN.uv.xy); 

	wpos.y += waveParams.z;
	
	OUT.p = mul(vpMat, wpos);
	OUT.wp.xyz=wpos.xyz;
    
    return OUT;
}

void wDepth_ps_op(
	PInLite IN,
	out float4 color : COLOR
)
{
    color.rgb = IN.wp.yxz;
}
