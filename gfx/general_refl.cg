#define shTex 512
#define shFil 3

struct VIn
{
    float4 p    : POSITION;
    float3 n    : NORMAL;
    float3 t    : TANGENT;
    float2 uv   : TEXCOORD0;
    float2 uv2   : TEXCOORD1;
};
 
struct VOut
{
    float4 p    : POSITION;
    float4 uv   : TEXCOORD0;
    float3 wp   : TEXCOORD1;
    float4 n    : TEXCOORD2;
    float4 t    : TEXCOORD3;
    float4 b    : TEXCOORD4;
    float3 sdir : TEXCOORD5;
    float4 oLightPosition0	: TEXCOORD6;
    float4 oLightPosition1	: TEXCOORD7;
    float4 oLightPosition2	: TEXCOORD8;
    float4 oLightPosition3	: TEXCOORD9;
};
 
struct PIn
{
    float4 uv   : TEXCOORD0;
    float3 wp   : TEXCOORD1;
    float4 n    : TEXCOORD2;
    float4 t    : TEXCOORD3;
    float4 b    : TEXCOORD4;
    float3 sdir : TEXCOORD5;
    float4 LightPosition0	: TEXCOORD6;
    float4 LightPosition1	: TEXCOORD7;
    float4 LightPosition2	: TEXCOORD8;
    float4 LightPosition3	: TEXCOORD9;
 };
 

VOut diffuse_vs_bop(VIn IN,
    uniform float4x4 wMat,
    uniform float4x4 wvpMat,
    uniform float3 camPos,
    uniform float4 spotlightDir,
    uniform float4x4 texWorldViewProjMatrix0,
    uniform float4x4 texWorldViewProjMatrix1,
    uniform float4x4 texWorldViewProjMatrix2,
    uniform float4x4 texWorldViewProjMatrix3

)
{
    VOut OUT;
    OUT.wp = mul(wMat, IN.p);
    OUT.p = mul(wvpMat, IN.p);
 
 // Projective texture coordinates, adjust for mapping
	float4x4 scalemat = float4x4(0.5,   0,   0, 0.5, 
	                               0,-0.5,   0, 0.5,
								   0,   0, 0.5, 0.5,
								   0,   0,   0,   1);
	float4 projectionCoord = mul(scalemat, OUT.p);

	OUT.t.w = projectionCoord.x;
	OUT.b.w = projectionCoord.y;
    OUT.n.w = projectionCoord.w;
	 
    OUT.uv.xy = IN.uv.xy;
    OUT.uv.zw=OUT.p.zw;
 
    OUT.n.xyz = IN.n;
    OUT.t.xyz = IN.t;
    OUT.b.xyz = cross(IN.t, IN.n);


    OUT.sdir.xyz = mul(wMat, spotlightDir).xyz; // spotlight dir in world space

	OUT.oLightPosition0 = mul(texWorldViewProjMatrix0, IN.p);
	OUT.oLightPosition1 = mul(texWorldViewProjMatrix1, IN.p);
	OUT.oLightPosition2 = mul(texWorldViewProjMatrix2, IN.p);
     OUT.oLightPosition3 = mul(texWorldViewProjMatrix3, IN.p);

     return OUT;
}
 


float shadowBilinear(sampler2D shadowMapSampler, float4 shadowMapPos,float blur,float texRes)
{
shadowMapPos = shadowMapPos / shadowMapPos.w;
float4 vTexCoord=float4(shadowMapPos.xy,1,1);
float fShadowTerm = 0.0f;
float fLightDepth=shadowMapPos.z;

// transform to texel space
float2 vShadowMapCoord = texRes * vTexCoord;    
// Determine the lerp amounts           
float2 vLerps = frac(vShadowMapCoord);

// read in bilerp stamp, doing the shadow checks
float fSamples[4];
     
fSamples[0] = (tex2Dlod(shadowMapSampler, vTexCoord).x + blur < fLightDepth) ? 0.0f: 1.0f;  
fSamples[1] = (tex2Dlod(shadowMapSampler, vTexCoord + float4(1.0/texRes, 0,0,0)).x + blur < fLightDepth) ? 0.0f: 1.0f;  
fSamples[2] = (tex2Dlod(shadowMapSampler, vTexCoord + float4(0, 1.0/texRes,0,0)).x + blur < fLightDepth) ? 0.0f: 1.0f;  
fSamples[3] = (tex2Dlod(shadowMapSampler, vTexCoord + float4(1.0/texRes, 1.0/texRes,0,0)).x + blur < fLightDepth) ? 0.0f: 1.0f;  
     
//lerp between the shadow values to calculate our light amount
fShadowTerm = lerp(lerp(fSamples[0], fSamples[1], vLerps.x ),
lerp( fSamples[2], fSamples[3], vLerps.x ), vLerps.y );                              
                                 
return fShadowTerm;                                 
}

float shadowSmooth(sampler2D shadowMap, float4 shadowMapPos,float blur,float texRes)
{
shadowMapPos = shadowMapPos / shadowMapPos.w;
float4 vTexCoord=float4(shadowMapPos.xy,1,1);
float fShadowTerm = 0.0f;
float fLightDepth=shadowMapPos.z;
float iSqrtSamples=shFil;

        
     float fRadius = (iSqrtSamples - 1.0f) / 2;        
     for (float y = -fRadius; y <= fRadius; y++)
     {
         for (float x = -fRadius; x <= fRadius; x++)
         {
             float2 vOffset = 0;
             vOffset = float2(x, y);                
             vOffset /= texRes;
             float2 vSamplePoint = vTexCoord + vOffset; 
             float fDepth = tex2Dlod(shadowMap, float4(vSamplePoint,1,1)).x+blur;
             float fSample = (fLightDepth <= fDepth);
             
             // Edge tap smoothing
             float xWeight = 1;
             float yWeight = 1;
             
             if (x == -fRadius)
                 xWeight = 1 - frac(vTexCoord.x * texRes);
             else if (x == fRadius)
                 xWeight = frac(vTexCoord.x *texRes);
                 
             if (y == -fRadius)
                 yWeight = 1 - frac(vTexCoord.y * texRes);
             else if (y == fRadius)
                 yWeight = frac(vTexCoord.y *texRes);
                 
		  if(vSamplePoint.x>1 || vSamplePoint.x<0 ||
			vSamplePoint.y>1 || vSamplePoint.y<0)
			fSample=1;

             fShadowTerm += fSample * xWeight * yWeight;
         }                                            
     }        
     
     fShadowTerm /= ((iSqrtSamples - 1) * (iSqrtSamples - 1));
     

//fShadowTerm=((tex2Dlod(shadowMap, float4(shadowMapPos.xy,0,0))).x+blur >= shadowMapPos.z) ? 1.0f : 0.0f;
//return fShadowTerm;

     return fShadowTerm;
}

float shadowPDF16(sampler2D shadowMap, float4 shadowMapPos, float bias,sampler2D rot,float2 ssp,float blur)
{
float4 n = tex2Dlod(rot, float4(ssp*4,0,0));
	shadowMapPos = shadowMapPos / shadowMapPos.w;
	float2 uv = shadowMapPos.xy;

float2 vTexelSize = 1/512.0f;

float2 vTaps[16] = {float2(-0.326212,-0.40581),float2(-0.840144,-0.17358),
float2(-0.495914,0.757137),float2(-0.103345,0.420716),
float2(0.86234,-0.194983),
float2(0.185461,-0.893124),
float2(0.207431,0.164425),float2(0.79642,0.212458),
float2(-0.32194,-0.932615),float2(-0.791559,-0.59771),
float2(-0.5559,0.1771),float2(0.21559,0.1771),
float2(-0.251559,0.25771),float2(-0.491559,-0.59771),
float2(-0.591559,0.39771),float2(0.891559,-0.79771)
};

float cSampleAccum=0;
float cSampleA=0;



for ( int nTapIndex = 0; nTapIndex < 16; nTapIndex++ )
{
float2 tap = vTaps[nTapIndex];
float2 rotTap=float2(tap.x*n.r-tap.x*n.g,tap.y*n.r+tap.y*n.g);
float2 vTapCoord = shadowMapPos.xy + vTexelSize * rotTap*blur;
cSampleAccum += ((tex2Dlod(shadowMap, float4(vTapCoord.x,vTapCoord.y,0,0))).x + bias >= shadowMapPos.z) ? 1.0f : 0.0f;

}

cSampleAccum=cSampleAccum / 16.0f; // Return average
return cSampleAccum;
}



float shadowPDF(sampler2D shadowMap, float4 shadowMapPos, float2 offset, float popo,sampler2D rot,float2 ssp,float blur)
{
	shadowMapPos = shadowMapPos / shadowMapPos.w;
	float2 uv = shadowMapPos.xy;


float2 vTexelSize = offset;

float2 vTaps[6] = {float2(-0.326212,-0.40581),float2(-0.840144,-0.07358),
float2(-0.695914,0.457137),float2(-0.203345,0.620716),
float2(0.96234,-0.194983),
float2(0.185461,-0.893124)};

float cSampleAccum=0;
float cSampleA=0;

float4 n = tex2Dlod(rot, float4(ssp.x/50,ssp.y/50,0,0));

for ( int nTapIndex = 0; nTapIndex < 6; nTapIndex++ )
{
float2 tap = vTaps[nTapIndex]; 
float2 rotTap=float2(tap.x*n.r-tap.x*n.g,tap.y*n.r+tap.y*n.g);
float2 vTapCoord = shadowMapPos.xy + vTexelSize * rotTap*blur;

cSampleAccum += ((tex2Dlod(shadowMap, float4(vTapCoord.x,vTapCoord.y,0,0))).x >= shadowMapPos.z) ? 1.0f : 0.0f;

}

//cSampleAccum=cSampleAccum / 6.0; // Return average
return cSampleAccum;
}


void diffuse_ps_bop(
    PIn IN,
    uniform float2 scaleDiff,
    uniform float4 lightDiffuse,
    uniform float3 lightDif0,
    uniform float4 lightPos0,
    uniform float4 lightAtt0,
    uniform float4 matSpec0,
    uniform float matShininess,
    uniform float3 camPos,
    uniform float4 spotlightParams,
    uniform float4x4 iTWMat,
    uniform float4x4 spVP,
    uniform float4 depthRange0,
    uniform float4 depthRange1,
    uniform float4 depthRange2,
    float2 screenSpace : WPOS,
    uniform sampler2D diffuseMap : register(s0),
    uniform sampler2D normalMap : register(s1),
    uniform sampler2D reflMap : register(s2),
    uniform sampler2D shadowMap0: register(s3),
    uniform sampler2D shadowMap1: register(s4),
    uniform sampler2D shadowMap2: register(s5), 
    uniform sampler2D shadowMap3: register(s6), 
    out float4 color0 : COLOR0,
    out float4 color1 : COLOR1,
    out float4 color2 : COLOR2,
    out float4 color3 : COLOR3

	)
{


    float shadowing = 1.0f;
	
    // direction
    float3 ld0 = normalize(lightPos0.xyz - (lightPos0.w * IN.wp.xyz));
 
    half lightDist = length(lightPos0.xyz - IN.wp.xyz) / lightAtt0.r;
    // attenuation
    half ila = lightDist * lightDist; // quadratic falloff
    half la = 1.0 - ila;
    
	float2 texCoord = IN.uv.xy*scaleDiff;

	float2 reflUV = float2(IN.t.w,IN.b.w)/IN.n.w;
	float4 reflection = tex2D(reflMap, reflUV);

    float4 normalTex = tex2D(normalMap, texCoord);

/*  //Dobre pre teren
float zet=normalTex.z;
normalTex.z=0;
normalTex=normalize(normalTex);
normalTex.z=zet;*/

    float3x3 tbn = float3x3(IN.t.xyz,IN.b.xyz, IN.n.xyz);
    float3 normal = mul(transpose(tbn), normalTex.xyz*2-1); // to object space
    normal = normalize(mul((float3x3)iTWMat, normal));
 
    float3 eyeDir = IN.wp.xyz - camPos.xyz;
    float distance = length(eyeDir);
    eyeDir = normalize(eyeDir);

    float3 diffuse = dot(ld0, normal);
    diffuse = abs(max(diffuse,diffuse/2));
 	//float3 diffuse = max(dot(ld0, normal), 0);
       
    // calculate the spotlight effect
    float spot = (spotlightParams.x == 1 &&
        spotlightParams.y == 0 &&
        spotlightParams.z == 0 &&
        spotlightParams.w == 1 ? 1 : // if so, then it's not a spot light
        saturate(
            (dot(ld0, normalize(-IN.sdir.xyz)) -spotlightParams.y) /
            (spotlightParams.x - spotlightParams.y)));
 

float3 camDir = normalize(camPos - IN.wp.xyz);
float3 halfVec = normalize(ld0 + camDir);
float3 specular = pow(max(dot(normal, halfVec), 0), matShininess);

tbn=transpose(tbn);

float3 ld=float3(1,0,1);
ld = mul(tbn,ld); 
float3 halfVec2 = normalize(ld + camDir);
float3 specular2=saturate(pow(max(dot(normal, halfVec2), 0), 64)/3);

ld=float3(-1,0,1);
ld = mul(tbn,ld); 
float3 halfVec3 = normalize(ld + camDir);
specular2+=saturate(pow(max(dot(normal, halfVec3), 0), 64)/3);

ld=float3(0,-1,1);
ld = mul(tbn,ld); 
float3 halfVec4 = normalize(ld + camDir);
specular2+=saturate(pow(max(dot(normal, halfVec4), 0), 64)/3);


float4 diffuseTex = tex2D(diffuseMap, texCoord);
diffuseTex += reflection;
diffuseTex /= 2;

//diffuseTex.rgb*=clamp(saturate(0.5*1.6),0.2,1);

 
float norm=dot(normal, ld0);

if(norm<0)
	shadowing=0;
else	
{

float adder=1;

if(norm<0.5)
	adder+=(0.5-norm)*3;


	if (IN.uv.z <= 15)
	{

//shadowing = shadowPDF16(shadowMap0, IN.LightPosition0,0.0000015*adder,randomC,screenSpace.xy,2);

shadowing = shadowSmooth(shadowMap0, IN.LightPosition0,0.0000015*adder,shTex);
	}
	else if (IN.uv.z <= 35)
	{
shadowing = shadowSmooth(shadowMap1, IN.LightPosition1,0.00000018*adder,shTex);
	}
    	else if (IN.uv.z <= 140)
	{
shadowing = shadowSmooth(shadowMap2, IN.LightPosition2,0.0000002*adder ,shTex);
	}
	else if (IN.uv.z <= 600)
	{
shadowing = shadowSmooth(shadowMap3, IN.LightPosition3,0.0000002,shTex);
	}

	if(norm<0.5)
	shadowing*=norm*2;
}

//shadowing=pow(shadowing,1.6);
//diffuse*=shadowing;
//specular*=shadowing;

/*
float3 vecL=IN.wp.xyz-float3(-5,-3,0);
float3 plVec = -1*normalize(vecL);
float atten = length(vecL);
float3 diffuse2 = max(dot(plVec, normal), 0)*saturate(2-atten/5);
*/

    float3 diffuseContrib = (diffuse * lightDif0 * diffuseTex.rgb);
    float3 specularContrib = ((specular+specular2) * matSpec0.rgb);
    float3 light0C = (diffuseContrib + specularContrib) * la * spot;

float4 ambient=float4(0.5,0.5,0.55,1);
//ambient.rgb+=max((normal.x-normal.y)*normal.z*0.2,-0.5)/2;

float4 def=diffuseTex*ambient;


float3 oColour = saturate(lightDiffuse*shadowing+ambient).rgb;
float distanceFog = clamp((distance-500)/2000,0,1)/2;
float4 outp=(def+float4(light0C, 1))*float4(oColour,1)+float4(specularContrib*diffuse*saturate(shadowing+0.1),0);

float3 atmFog = float3(0.45,0.6,0.7)*0.8;
outp.rgb = lerp(outp.rgb,atmFog,distanceFog);


/*
float3 ambient=float3(0.5,0.5,0.55);

float3 diffuseContrib = (diffuse * lightDif0 * diffuseTex.rgb);
float3 specularContrib = ((specular*shadowing + specular2) * matSpec0.rgb)*1;

float3 shadow = shadowing*ambient;

float3 light0C = (diffuseContrib*shadow + specularContrib) * la * spot;


float4 outp = float4(light0C,1);*/

	color0=outp;
	color1=float4(0.5,0.5,saturate(matSpec0.a+specular.r/2),1);
	color2=float4(0,0,0,1);
	color3=float4(IN.uv.z/IN.uv.w,IN.uv.z,0,1);
}