#define shTex 512
#define shFil 5

struct VIn
{
	float4 p : POSITION;
	float3 n : NORMAL;
	float3 t : TANGENT;
	float2 uv : TEXCOORD0;
};

struct VOut
{
	float4 p : POSITION;
	float4 uv : TEXCOORD0;
	float4 wp : TEXCOORD1;
	float4 n : TEXCOORD2;
	float4 t : TEXCOORD3;
	float4 b : TEXCOORD4;
	float4 oLightPosition0 : TEXCOORD5;
	float4 oLightPosition1 : TEXCOORD6;
	float4 oLightPosition2 : TEXCOORD7;
	float4 oLightPosition3 : TEXCOORD8;
};

struct PIn
{
	float4 uv : TEXCOORD0;
	float4 wp : TEXCOORD1;
	float4 n : TEXCOORD2;
	float4 t : TEXCOORD3;
	float4 b : TEXCOORD4;
	float4 LightPosition0 : TEXCOORD5;
	float4 LightPosition1 : TEXCOORD6;
	float4 LightPosition2 : TEXCOORD7;
	float4 LightPosition3 : TEXCOORD8;
};


VOut diffuse_vs(VIn IN,
	uniform float4x4 wMat,
	uniform float4x4 wvpMat,
	uniform float3 camPos,
	uniform float4x4 texWorldViewProjMatrix0,
	uniform float4x4 texWorldViewProjMatrix1,
	uniform float4x4 texWorldViewProjMatrix2,
	uniform float4x4 texWorldViewProjMatrix3

	)
{
	VOut OUT;
	OUT.wp.xyz = mul(wMat, IN.p).xyz;
	
	OUT.p = mul(wvpMat, IN.p);

	OUT.uv.xy = IN.uv.xy;
	OUT.uv.zw = OUT.p.zw;

	OUT.n.xyz = IN.n;
	OUT.t.xyz = IN.t;
	OUT.b.xyz = cross(IN.t, IN.n);

	float3 viewVec = camPos - IN.p.xyz;
	OUT.t.w = dot(viewVec, OUT.t.xyz);
	OUT.b.w = dot(viewVec, OUT.b.xyz);
	OUT.n.w = dot(viewVec, OUT.n.xyz);

	OUT.oLightPosition0 = mul(texWorldViewProjMatrix0, IN.p);
	OUT.oLightPosition1 = mul(texWorldViewProjMatrix1, IN.p);
	OUT.oLightPosition2 = mul(texWorldViewProjMatrix2, IN.p);
	OUT.oLightPosition3 = mul(texWorldViewProjMatrix3, IN.p);

	return OUT;
}

float shadowSmooth(sampler2D shadowMap, float4 shadowMapPos, float blur, float texRes)
{
	shadowMapPos = shadowMapPos / shadowMapPos.w;
	float4 vTexCoord = float4(shadowMapPos.xy, 1, 1);
	float fShadowTerm = 0.0f;
	float fLightDepth = shadowMapPos.z;
	float iSqrtSamples = shFil;


	float fRadius = (iSqrtSamples - 1.0f) / 2;
	for (float y = -fRadius; y <= fRadius; y++)
	{
		for (float x = -fRadius; x <= fRadius; x++)
		{
			float2 vOffset = 0;
			vOffset = float2(x, y);
			vOffset /= texRes;
			float2 vSamplePoint = vTexCoord.xy + vOffset;
			float fDepth = tex2Dlod(shadowMap, float4(vSamplePoint, 1, 1)).x + blur;
			float fSample = (fLightDepth <= fDepth);

			// Edge tap smoothing
			float xWeight = 1;
			float yWeight = 1;

			if (x == -fRadius)
				xWeight = 1 - frac(vTexCoord.x * texRes);
			else if (x == fRadius)
				xWeight = frac(vTexCoord.x *texRes);

			if (y == -fRadius)
				yWeight = 1 - frac(vTexCoord.y * texRes);
			else if (y == fRadius)
				yWeight = frac(vTexCoord.y *texRes);

			if (vSamplePoint.x > 1 || vSamplePoint.x < 0 ||
				vSamplePoint.y>1 || vSamplePoint.y < 0)
				fSample = 1;

			fShadowTerm += fSample * xWeight * yWeight;
		}
	}

	fShadowTerm /= ((iSqrtSamples - 1) * (iSqrtSamples - 1));


	//fShadowTerm=((tex2Dlod(shadowMap, float4(shadowMapPos.xy,0,0))).x+blur >= shadowMapPos.z) ? 1.0f : 0.0f;
	//return fShadowTerm;

	return fShadowTerm;
}

float3 whiteout_blend(float3 n1, float3 n2)
{
    float3 t = n1.xyz*float3( 2,  2, 2) + float3(-1, -1,  0);
    float3 u = n2.xyz*float3(-2, -2, 2) + float3( 1,  1, -1);
    float3 r = t*dot(t, u) - u*t.z;
    return normalize(r);
}

float3 color_blend2(float3 n1, float3 n2)
{
    n1 = n1;
    float3 a = n1 < 0.5 ? 1 : -1;
    float3 b = n1 < 0.5 ?  0 : 1;
    n1 =  2*a + n1;
    n2 = n2*a + b;
    float3 r = n1*n2 - a;
    return r;
}

float3 color_blend(float3 normalTex, float3 normalTex2)
{
	float3 r;
	r = (normalTex < 0.5 ? (2.0 * normalTex * normalTex2) : (1.0 - 2.0 * (1.0 - normalTex) * (1.0 - normalTex2)));
	return r;
}
 
float3 offsetCubemapUV(in float3 v, float3 CubemapPositionWS, float3 PositionWS, float EnvMapOffset)
{  
	float3 ReflDirectionWS = v;
	return (normalize(PositionWS - CubemapPositionWS)*EnvMapOffset + ReflDirectionWS);
}

void diffuse_ps(
	PIn IN,
	uniform float3 diffuseColor,
	uniform float4 lightDif0,
	uniform float4 lightPos0,
	uniform float4 matSpec0,
	uniform float matShininess,	
	uniform float uvScale,
	uniform float detailScale,
	uniform float3 camPos,
	uniform float4 fogColor,
	uniform float4 fogParams,
	uniform float3 ambientColor,
	uniform float specular2Weight,
	uniform float4x4 iTWMat,
	uniform float4x4 viewMat,
	uniform float4 cubemapWPOffset,
	float2 screenSpace : WPOS,
	uniform sampler2D diffuseMap : register(s0),
	uniform sampler2D normalMap : register(s1),
	uniform sampler2D dispMap : register(s2),
	uniform sampler2D shadowMap0 : register(s3),
	uniform sampler2D shadowMap1 : register(s4),
	uniform sampler2D shadowMap2 : register(s5),
	uniform sampler2D shadowMap3 : register(s6),
	uniform sampler2D normalDetailMap : register(s7),
	uniform samplerCube envMap : register(s8),
	out float4 color0 : COLOR0,
	out float4 color1 : COLOR1,
	out float4 color2 : COLOR2,
	out float4 color3 : COLOR3
	)
{
	float uvDetailScale = uvScale*detailScale;
	float offsetScale = 2;
	
	// direction
	float3 lightDir = normalize(lightPos0.xyz - (lightPos0.w * IN.wp.xyz));

	//pm offset
	float height = tex2D(dispMap, IN.uv.xy * uvScale).x * offsetScale;
	float3 vVec = float3(IN.t.w, IN.b.w, IN.n.w);	
	float2 texCoordDispOffset = (0.025 * height - 0.015*offsetScale) * normalize(vVec).xy;
	
	float2 texCoordBase = IN.uv.xy * uvScale + texCoordDispOffset;
	float2 texCoordDetail = IN.uv.xy * uvDetailScale + texCoordDispOffset;

	
	//base normal+detail
	float3 normalTex = tex2D(normalMap, texCoordBase).rgb;
	float3 normalTex2 = tex2D(normalDetailMap, texCoordDetail).rgb;
	normalTex = color_blend(normalTex,normalTex2).rgb;
	
	//lighting
	float3x3 tbn = float3x3(IN.t.xyz, IN.b.xyz, IN.n.xyz);
	float3 normal = mul(transpose(tbn), normalTex.xyz*2 - 1); // to object space
	normal = normalize(mul((float3x3)iTWMat, normal));

	float3 eyeDir = IN.wp.xyz - camPos.xyz;
	float distance = length(eyeDir);
	eyeDir = normalize(eyeDir);

	float4 diffuseTex = tex2D(diffuseMap, texCoordBase);
	diffuseTex.rgb *= diffuseColor;
	
	float3 ReflectDir = reflect(eyeDir,normal);
	ReflectDir.z *= -1;
	float3 cubeDir = offsetCubemapUV(ReflectDir,cubemapWPOffset.xyz,IN.wp.xyz, cubemapWPOffset.w);
	
	diffuseTex.rgb = texCUBE(envMap,cubeDir).rgb;
	
	float diffuseGeomLight = dot(lightDir, IN.n.xyz);
	float diffuseLight = dot(lightDir, normal);
	
	float3 camDir = normalize(camPos - IN.wp.xyz);
	float3 halfVec = normalize(lightDir + camDir);
	float3 specular = pow(max(dot(normal, halfVec), 0), matShininess);
	
	//indirect specular
	tbn = transpose(tbn);

	float3 ld = float3(1, 0, 1);
	ld = mul(tbn, ld);
	float3 halfVec2 = normalize(ld + camDir);
	float3 specular2 = saturate(pow(max(dot(normal, halfVec2), 0), 64) / 3);

	ld = float3(-1, 0, 1);
	ld = mul(tbn, ld);
	float3 halfVec3 = normalize(ld + camDir);
	specular2 += saturate(pow(max(dot(normal, halfVec3), 0), 64) / 3);

	ld = float3(0, -1, 1);
	ld = mul(tbn, ld);
	float3 halfVec4 = normalize(ld + camDir);
	specular2 += saturate(pow(max(dot(normal, halfVec4), 0), 64) / 3);
	
	//float wl = 1 - abs(diffuseGeomLight);
	/*if(diffuseGeomLight>diffuseLight)
	{
		float wl = diffuseGeomLight - diffuseLight;
		diffuseLight += wl/2;
	}*/
		//diffuseLight = lerp(diffuseLight,diffuseLight*(1-diffuseGeomLight) + diffuseGeomLight,1);
		
	//shadow
	float norm = diffuseLight;
	float shadowing = 1.0f;
	
	if (norm < 0)
		shadowing = 0;
	else
	{
		float adder = 1;

		if (norm < 0.5)
			adder += (0.5 - norm) * shFil*5;


		if (IN.uv.z <= 12)                                                                     
		{

			shadowing = shadowSmooth(shadowMap0, IN.LightPosition0, 0.0000015*adder, shTex);
		}
		else if (IN.uv.z <= 30)
		{
			shadowing = shadowSmooth(shadowMap1, IN.LightPosition1, 0.000000235*adder, shTex);
		}
		else if (IN.uv.z <= 120)
		{
			shadowing = shadowSmooth(shadowMap2, IN.LightPosition2, 0.00000037*adder, shTex);
		}
		else if (IN.uv.z <= 600)
		{
			shadowing = shadowSmooth(shadowMap3, IN.LightPosition3, 0.00000032, shTex);
		}

		if (norm < 0.5)
			shadowing *= norm * 2;

	}

	//ambientColor = float3(0.35,0.5,0.6);
		
	float3 underShadow = max(shadowing.xxx,ambientColor);
	//ambient lighting
	//float3 ambDifLight = saturate(-diffuseLight)*ambientColor;
	
	//slight gi normal mapping
	float3 diffuseContrib = lerp(ambientColor, lightDif0.rgb, underShadow*abs(max(diffuseLight,diffuseLight)));
	
	float specWeight = specular2Weight;
	float3 specularContrib = ((specular + specular2*3) * matSpec0.rgb*specWeight );
	
	float3 outColor = (diffuseContrib*diffuseTex + specularContrib);
	
	//float3 directLight = saturate(shadowing + ambientColor);
	
	//float4 output = float4(rawColor*lerp(ambientLight, directLight,underShadow),1);
	float4 output = float4(outColor,1);
	
	//distance fog
	float insideFog = saturate((distance - fogParams.y) / fogParams.z)*fogColor.a;
	float3 atmFog = fogColor.rgb;
	output.rgb = lerp(output.rgb, atmFog, insideFog);

	
	float3 viewNormal = mul((float3x3)viewMat, float3(normal));
	
	//float4 viewNormal = mul(viewMat, float4(normal,1));
	//viewNormal /= viewNormal.w;
	
	viewNormal.xyz = normalize(viewNormal.xyz);
	//viewNormal.z *= -1;
	//viewNormal.xyz = (viewNormal.xyz + 1)/2;
	
	float4 viewPos = mul(viewMat, float4(IN.wp.xyz,1));
	viewPos /= viewPos.w;
	output.rgb = diffuseTex.xyz;
	
	color0 = output;
	color1 = float4(viewNormal.xyz, saturate(matSpec0.a + specular.r / 2));
	color2 = float4(0, 0, 0, 1);
	color3 = float4(1 - IN.uv.z / IN.uv.w, distance, 0, 1);
}