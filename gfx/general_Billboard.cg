#define shTex 512
#define shFil 3

struct VIn
{
	float4 p    : POSITION;
	float2 uv   : TEXCOORD0;
	float4 c : COLOR;
};

struct VOut
{
	float4 p    : POSITION;
	float4 uv   : TEXCOORD0;
	float4 wp   : TEXCOORD1;
	float4 oLightPosition0	: TEXCOORD6;
	float4 oLightPosition1	: TEXCOORD7;
	float4 oLightPosition2	: TEXCOORD8;
	float4 oLightPosition3	: TEXCOORD9;
};

struct PIn
{
	float4 uv   : TEXCOORD0;
	float4 wp   : TEXCOORD1;
	float4 LightPosition0	: TEXCOORD6;
	float4 LightPosition1	: TEXCOORD7;
	float4 LightPosition2	: TEXCOORD8;
	float4 LightPosition3	: TEXCOORD9;
};


VOut diffuse_vs_bop(VIn IN,
uniform float4x4 wMat,
uniform float4x4 vpMat,
uniform float3 camPos,
uniform float4x4 texWorldViewProjMatrix0,
uniform float4x4 texWorldViewProjMatrix1,
uniform float4x4 texWorldViewProjMatrix2,
uniform float4x4 texWorldViewProjMatrix3
)
{
	VOut OUT;

	float4 wpos = mul(wMat, IN.p);
	OUT.wp.xyz = wpos.xyz;
	OUT.wp.w = IN.c.w;
	
	OUT.p = mul(vpMat, wpos);
	
	OUT.uv.xy = IN.uv.xy;
	OUT.uv.zw = OUT.p.zw;
	
	OUT.oLightPosition0 = mul(texWorldViewProjMatrix0, IN.p);
	OUT.oLightPosition1 = mul(texWorldViewProjMatrix1, IN.p);
	OUT.oLightPosition2 = mul(texWorldViewProjMatrix2, IN.p);
	OUT.oLightPosition3 = mul(texWorldViewProjMatrix3, IN.p);

	/*
	float viewDot = dot(normalize(wpos.xz - camPos.xz), float2(0,1));
	float viewDot2 = dot(normalize(wpos.xz - camPos.xz), float2(1,0));
	
	float angleW = 0;
	
	if(viewDot >= 0 && viewDot2 >= 0)
	{
		angleW = viewDot2/4;
	}
	else if(viewDot <= 0 && viewDot2 >= 0)
	{
		angleW = 0.25 + viewDot/-4;
	}
	else if(viewDot2 <= 0)
	{
		angleW = 0.5 + viewDot2/-4;
	}
	else
	{
		angleW = 0.75 + viewDot/4;
	}
	
	OUT.uv.x = OUT.uv.x + angleW;*/

	
	return OUT;
}

float shadowBilinear(sampler2D shadowMapSampler, float4 shadowMapPos,float offset,float texRes)
{
	shadowMapPos = shadowMapPos / shadowMapPos.w;
	float4 vTexCoord=float4(shadowMapPos.xy,1,1);
	float fShadowTerm = 0.0f;
	float fLightDepth=shadowMapPos.z;

	// transform to texel space
	float2 vShadowMapCoord = texRes * vTexCoord.xy;    
	// Determine the lerp amounts           
	float2 vLerps = frac(vShadowMapCoord);

	// read in bilerp stamp, doing the shadow checks
	float fSamples[4];

	fSamples[0] = (tex2Dlod(shadowMapSampler, vTexCoord).x + offset < fLightDepth) ? 0.0f: 1.0f;  
	fSamples[1] = (tex2Dlod(shadowMapSampler, vTexCoord + float4(1.0/texRes, 0,0,0)).x + offset < fLightDepth) ? 0.0f: 1.0f;  
	fSamples[2] = (tex2Dlod(shadowMapSampler, vTexCoord + float4(0, 1.0/texRes,0,0)).x + offset < fLightDepth) ? 0.0f: 1.0f;  
	fSamples[3] = (tex2Dlod(shadowMapSampler, vTexCoord + float4(1.0/texRes, 1.0/texRes,0,0)).x + offset < fLightDepth) ? 0.0f: 1.0f;  
	
	//lerp between the shadow values to calculate our light amount
	fShadowTerm = lerp(lerp(fSamples[0], fSamples[1], vLerps.x ),
	lerp( fSamples[2], fSamples[3], vLerps.x ), vLerps.y );                              
		
	return fShadowTerm;                                 
}


void diffuse_ps_bop(
	PIn IN,
	uniform float4 fogColor,
	uniform float4 fogParams,
	uniform float alphaTest,
	uniform float3 camPos,
	uniform float enlighten,
	uniform float3 diffuseColor,
	uniform sampler2D diffuseMap : register(s0),
	uniform sampler2D shadowMap0: register(s1),
	uniform sampler2D shadowMap1: register(s2),
	uniform sampler2D shadowMap2: register(s3), 
	uniform sampler2D shadowMap3: register(s4), 
	out float4 color0 : COLOR0,
	out float4 color1 : COLOR1,
	out float4 color2 : COLOR2,
	out float4 color3 : COLOR3
)
{	
	float2 texCoord = IN.uv.xy;	

	float3 eyeDir = IN.wp.xyz - camPos.xyz;
	float distance = length(eyeDir);
	
	float4 diffuseTex = tex2D(diffuseMap, texCoord);
	diffuseTex.rgb += 0.1;
	diffuseTex.rgb *= enlighten;
	diffuseTex.rgb *= diffuseColor.rgb;
	
	if(diffuseTex.a<alphaTest)
		discard;

	float shadowing = 1.0f;

	{
		float adder=1;

		if (IN.uv.z <= 15)
		{
			shadowing = shadowBilinear(shadowMap0, IN.LightPosition0,0.0000015*adder,shTex);
		}
		else if (IN.uv.z <= 35)
		{
			shadowing = shadowBilinear(shadowMap1, IN.LightPosition1,0.00000018*adder,shTex);
		}
		else if (IN.uv.z <= 140)
		{
			shadowing = shadowBilinear(shadowMap2, IN.LightPosition2,0.0000002*adder ,shTex);
		}
		else if (IN.uv.z <= 600)
		{
			shadowing = shadowBilinear(shadowMap3, IN.LightPosition3,0.0000002,shTex);
		}
	}

	float4 output = diffuseTex*shadowing;

	float insideFog = saturate((distance - fogParams.y) / fogParams.z)*fogColor.a;
	float3 atmFog = fogColor.rgb;
	output.rgb = lerp(output.rgb, atmFog, insideFog);

	color0=output;
	color1=float4(0.5,0.5,0,1);
	color2=float4(0,0,0,1);
	color3=float4(IN.uv.z/IN.uv.w,IN.uv.z,0,1);
}