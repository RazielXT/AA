

struct VIn
{
    float4 p    : POSITION;
    float3 n    : NORMAL;
    float3 t    : TANGENT;
    float2 uv   : TEXCOORD0;
};
 
struct VOut
{
    float4 p    : POSITION;
    float4 uv   : TEXCOORD0;
    float3 wp   : TEXCOORD1;
    float3 n    : TEXCOORD2;
    float3 t    : TEXCOORD3;
    float3 sdir : TEXCOORD4;
    float3 vVec : TEXCOORD5;
    float3 b    : TEXCOORD6;
    float4 oLightPosition0	: TEXCOORD7;
};
 
struct PIn
{
    float4 uv   : TEXCOORD0;
    float4 wp   : TEXCOORD1;
    float4 n    : TEXCOORD2;
    float4 t    : TEXCOORD3;
    float3 sdir : TEXCOORD4;
    float4 vVec : TEXCOORD5;
    float3 b    : TEXCOORD6;
    float4 shadowMapPos0 : TEXCOORD7;
 };
 

VOut wdiffuse_vs_op(VIn IN,
    uniform float4x4 wMat,
    uniform float4x4 wvpMat,
    uniform float3 camPos,
    uniform float4 spotlightDir,
    uniform float4x4 texWorldViewProjMatrix3
)
{
    VOut OUT;
    float4 wpo = mul(wMat, IN.p);
    OUT.wp.xyz=wpo.xyz;
    OUT.p = mul(wvpMat, IN.p);
 
    OUT.uv.xy = IN.uv.xy;
    OUT.uv.zw=OUT.p.zw;
 
    OUT.n.xyz = IN.n;
    OUT.t.xyz = IN.t;
    OUT.b.xyz  = cross(IN.t.xyz, IN.n.xyz);
    OUT.sdir = mul(wMat, spotlightDir).xyz; // spotlight dir in world space
 
	float3 viewVec = camPos - IN.p.xyz;
	OUT.vVec.x = dot(viewVec, OUT.t );
	OUT.vVec.y = dot(viewVec, OUT.b );
     OUT.vVec.z = dot(viewVec, OUT.n );
	OUT.oLightPosition0 = mul(texWorldViewProjMatrix3, IN.p);

    return OUT;
}
 

void wdiffuse_ps_op(
    PIn IN,
	uniform float scroll,
	uniform float speed,
    uniform float2 scaleDiff,
    uniform float4 lightDiffuse,
    uniform float3 matDiffuse,
    uniform float3 lightDif0,
    uniform float4 lightPos0,
    uniform float4 lightAtt0,
    uniform float3 camPos,
    uniform float playerSpeed,
    uniform float3 lightSpec0,
    uniform float matShininess,
    uniform float4 spotlightParams,
    uniform float4x4 iTWMat,
    uniform sampler2D diffuseMap : register(s0),
    uniform sampler2D normalMap : register(s1),
    uniform sampler2D groundMap : register(s2),
    uniform sampler2D shadowMap0: register(s3),
    uniform sampler2D shadowMap1: register(s4),
    uniform sampler2D shadowMap2: register(s5),
    uniform sampler2D shadowMap: register(s6),
    out float4 color0 : COLOR0,
    out float4 color1 : COLOR1,
    out float4 color2 : COLOR2,
    out float4 color3 : COLOR3


	)
{

float4 shadowMapPos= IN.shadowMapPos0 / IN.shadowMapPos0.w;
float2 uvs = shadowMapPos.xy;
speed*=0.05;

float map=tex2D(shadowMap, uvs).x;
float fShadowTerm=1;//(map >= shadowMapPos.z) ? 1.0f : 0.0f;
fShadowTerm = fShadowTerm*0.5+0.5;

    // direction
    float3 ld0 = normalize(lightPos0.xyz - (lightPos0.w * IN.wp.xyz));
 ld0.xz = lerp(-ld0.xz,ld0.xz,fShadowTerm);

    half lightDist = length(lightPos0.xyz - IN.wp.xyz) / lightAtt0.r;
    // attenuation
    half ila = lightDist * lightDist; // quadratic falloff
    half la = 1.0 - ila;
    
	float2 texCoord = 1*IN.uv.yx;


 float4 dif = tex2D(diffuseMap, float2(texCoord.x+0.5,texCoord.y+ scroll * (speed*2))*scaleDiff);

float3 dif2 = dif.rgb;

	texCoord.y += scroll * speed;

   float4 normalTex = tex2D(normalMap, texCoord*scaleDiff);

texCoord += float2(0.5,scroll * speed);
float height = normalTex.z;
normalTex.z=1;

normalTex+=tex2D(normalMap, texCoord*scaleDiff);
normalTex/=2;

    // Parallax mapping
	//float height = tex2D(dispMap, texCoord.xy*scaleDiff).x;
	texCoord = IN.uv + (0.015 * height - 0.01) * normalize(IN.vVec).xy;

 
 
    float3x3 tbn = float3x3(IN.t.xyz,IN.b.xyz, IN.n.xyz);

playerSpeed = saturate(playerSpeed/2-0.75);
float3 wnor = IN.wp.xyz-camPos;
float add = min(0.5,max((5-length(wnor))/5,0)*playerSpeed);

    float3 normal = mul(transpose(tbn), normalTex.xyz * 2 - 1); // to object space
    normal = normalize(mul((float3x3)iTWMat, normal));
 
    float3 diffuse = max(dot(ld0, normal), 0);
 
    // calculate the spotlight effect
    float spot = (spotlightParams.x == 1 &&
        spotlightParams.y == 0 &&
        spotlightParams.z == 0 &&
        spotlightParams.w == 1 ? 1 : // if so, then it's not a spot light
        saturate(
            (dot(ld0, normalize(-IN.sdir)) - spotlightParams.y) /
            (spotlightParams.x - spotlightParams.y)));
 
texCoord.x += scroll * speed*0.5;

    float3 diffuseTex = tex2D(groundMap, texCoord*scaleDiff*3).rgb*fShadowTerm;

    float3 diffuseContrib = (diffuse * lightDif0 * diffuseTex.rgb);

    float3 camDir = normalize(camPos - IN.wp.xyz);
    float3 halfVec = normalize(ld0 + camDir);
    float3 specular = pow(max(dot(normal, halfVec), 0), matShininess);

    float3 specularContrib = (specular * lightSpec0*(fShadowTerm*0.8+0.2));

    float3 light0C = (diffuseContrib) * la * spot;

float3 def=diffuseTex*dif2*matDiffuse;

color0=float4(def+light0C+specularContrib, dif.a*0.3*fShadowTerm+specularContrib.r*2);

color1=float4(normalTex.rg,0.4+specularContrib.r ,1);
color2=color0;
color3=float4(IN.uv.z/IN.uv.w,IN.uv.z,0,0);
}