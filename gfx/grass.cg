void main_vp(
			float4 iPosition : POSITION,
			float4 iColor    : COLOR,
			float2 iUV       : TEXCOORD0,
			float3 tNormal    : NORMAL,	
			out float4 oPosition : POSITION,
			out float4 oColor    : COLOR,
			out float4 oUV       : TEXCOORD0,
			out float2 oPos       : TEXCOORD5,
			uniform float time,
			uniform float frequency,
			uniform float4 direction,
			uniform float4x4 worldViewProj,
			uniform float3 camPos,
			uniform float fadeRange,
			uniform float3 lightDir,
			// shadows
			out float4 oLightPosition0	: TEXCOORD1,
			out float4 oLightPosition1	: TEXCOORD2,
			out float4 oLightPosition2	: TEXCOORD3,
            out float4 oLightPosition3	: TEXCOORD4,
			uniform float4x4 texWorldViewProjMatrix0,
			uniform float4x4 texWorldViewProjMatrix1,
			uniform float4x4 texWorldViewProjMatrix2,
			uniform float4x4 texWorldViewProjMatrix3,
			uniform float4 fogColor,
			uniform float4 fogParams)
{
	float4 position = iPosition;
	float dist = distance(camPos.xz, position.xz);
	oColor.a = saturate(2.0f - (2.0f * dist / (fadeRange+110)));	
	
	float oldposx = position.z;
	float offset = 0;
	
	//distance fog
	float insideFog = saturate((dist - fogParams.y) / fogParams.z)*fogColor.a;
	float3 atmFog = fogColor.rgb;
	oColor.rgb = lerp(float3(0.45,0.5,0.21), atmFog, insideFog)*tNormal.y;
	
	if (iUV.y == 0.0f)
	{
		offset = sin(time + oldposx * frequency);
		position += direction * offset;
	}
	else
	{	
		float diffuse = saturate(dot(-lightDir,tNormal.xyz));
		

		oColor.rgb *= lerp(0.35,1,diffuse);
	}

	oPosition = mul(worldViewProj, position);
	oUV.xy = iUV.xy;
	oUV.zw = oPosition.zw;
	oPos.xy = iColor.xy;
	
	oColor.a = oColor.a*0.0001 + 1 - saturate((oUV.z-50)/20);
	
	// Calculate the position of vertex in light space
	oLightPosition0 = mul(texWorldViewProjMatrix0, position);
	oLightPosition1 = mul(texWorldViewProjMatrix1, position);
	oLightPosition2 = mul(texWorldViewProjMatrix2, position);
    oLightPosition3 = mul(texWorldViewProjMatrix3, position);
}
/*
float t=fmod(3.14 + time + oldposx * frequency,6.28)-3.14;
	float off=0;
	if(t<0) off=1.27323954 * t + .405284735 * t * t;
	else    off=1.27323954 * t - .405284735 * t * t;

	if (iUV.y == 0.0f)
	{
		position += direction * off;
	}
*/

///
float shadowPCF(sampler2D shadowMap, float4 shadowMapPos, float2 offset,float bl)
{
shadowMapPos = shadowMapPos / shadowMapPos.w;
float2 vTapCoord = shadowMapPos.xy;

float cSampleAccum = 0;
if(tex2Dlod(shadowMap, float4(vTapCoord.x,vTapCoord.y-0.003,0,0)).x+ bl >= shadowMapPos.z) cSampleAccum+=1;
if(tex2Dlod(shadowMap, float4(vTapCoord.x-0.003,vTapCoord.y,0,0)).x + bl>= shadowMapPos.z) cSampleAccum+=1;
if(tex2Dlod(shadowMap, float4(vTapCoord.x,vTapCoord.y+0.003,0,0)).x+ bl >= shadowMapPos.z) cSampleAccum+=1;
if(tex2Dlod(shadowMap, float4(vTapCoord.x+0.003,vTapCoord.y,0,0)).x+ bl >= shadowMapPos.z) cSampleAccum+=1;

cSampleAccum=cSampleAccum/4;
//if (cSampleAccum<0.3) cSampleAccum=0.3;
return cSampleAccum;
}

///
void main_fp(float4 uv			: TEXCOORD0, 
			 float2 pos			: TEXCOORD5,
			 
			uniform float3 ambientColor,
			
			float4 iColor    : COLOR,

			float4 LightPosition0	: TEXCOORD1,
			float4 LightPosition1	: TEXCOORD2,
			float4 LightPosition2	: TEXCOORD3,
			float4 LightPosition3	: TEXCOORD4,

			/** uniform float3 lightAmbient, 
			 uniform float3 lightDiffuse, 
			 uniform float3 lightSpecular, 
			 uniform float matShininess,
			/**/
			 uniform sampler2D diffuseMap: register(s0),

			 uniform sampler2D noiseMap: register(s1),
			 
			uniform sampler2D shadowMap0: register(s2),

			uniform sampler2D shadowMap1: register(s3),

			uniform sampler2D shadowMap2: register(s4),

			uniform sampler2D shadowMap3: register(s5),

			uniform float4 invShadowMapSize0,
			uniform float4 invShadowMapSize1,
			uniform float4 invShadowMapSize2,
			uniform float4 pssmSplitPoints,

			 out float4 oColor : COLOR0,
			out float4 oColor1 : COLOR1,
			out float4 oColor2 : COLOR2,
			out float4 oColor3 : COLOR3)
{ 

	float4 diffTex = tex2D(diffuseMap, uv.xy);
	//float4 noiseTex = tex2D(noiseMap, pos.xy/1000+0.5);

	if(diffTex.a<0.45) discard;
	
	// calculate shadow
	float shadowing = 1.0f;

	if (uv.z <= 15)
	{
		shadowing = shadowPCF(shadowMap0, LightPosition0, invShadowMapSize0.xy,0.000001);
	}
	else if (uv.z <= 35)
	{
		shadowing = shadowPCF(shadowMap1, LightPosition1, invShadowMapSize1.xy,0.00000015 ); //1
	}else if (uv.z <= 140)

	{
		shadowing = shadowPCF(shadowMap2, LightPosition2, invShadowMapSize2.xy,0.0000003 ); //2
	}
	else if (uv.z <= 600)
	{
		shadowing = shadowPCF(shadowMap3, LightPosition3, invShadowMapSize2.xy,0.0000003 ); //2
	}
	
	float3 lighting = saturate(ambientColor + shadowing);
	//lighting/=1.25;

	float3 clr = diffTex.rgb * lighting;

	oColor = float4(clr, diffTex.a)*iColor;
	oColor1= float4(0.5,0.5,0.3,0);
	oColor2= float4(0,0,0,diffTex.a);
	oColor3= float4(uv.z/uv.w,uv.z,0,0);
}