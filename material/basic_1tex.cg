#include "shadow.cg"
#include "filters.cg"
#include "common.cg"

struct VIn
{
	float4 p : POSITION;
	float3 n : NORMAL;
	float3 t : TANGENT;
	float2 uv : TEXCOORD0;
};

struct VOut
{
	float4 p : POSITION;
	float4 uv : TEXCOORD0;
	float4 wp : TEXCOORD1;
	float4 n : TEXCOORD2;
	float4 t : TEXCOORD3;
	float4 b : TEXCOORD4;
	float4 oLightPosition0 : TEXCOORD5;
	float4 oLightPosition1 : TEXCOORD6;
	float4 oLightPosition2 : TEXCOORD7;
	float4 oLightPosition3 : TEXCOORD8;
};

struct PIn
{
	float4 uv : TEXCOORD0;
	float4 wp : TEXCOORD1;
	float4 n : TEXCOORD2;
	float4 t : TEXCOORD3;
	float4 b : TEXCOORD4;
	float4 LightPosition0 : TEXCOORD5;
	float4 LightPosition1 : TEXCOORD6;
	float4 LightPosition2 : TEXCOORD7;
	float4 LightPosition3 : TEXCOORD8;
};


VOut main_vs(VIn IN,
	uniform float4x4 wMat,
	uniform float4x4 wvpMat,
	uniform float3 camPos,
	uniform float4x4 texWorldViewProjMatrix0,
	uniform float4x4 texWorldViewProjMatrix1,
	uniform float4x4 texWorldViewProjMatrix2,
	uniform float4x4 texWorldViewProjMatrix3

	)
{
	VOut OUT;
	OUT.wp.xyz = mul(wMat, IN.p).xyz;
	
	OUT.p = mul(wvpMat, IN.p);

	OUT.uv.xy = IN.uv.xy;
	OUT.uv.zw = OUT.p.zw;

	OUT.n.xyz = IN.n;
	OUT.t.xyz = IN.t;
	OUT.b.xyz = cross(IN.t, IN.n);

	float3 viewVec = camPos - IN.p.xyz;
	OUT.t.w = dot(viewVec, OUT.t.xyz);
	OUT.b.w = dot(viewVec, OUT.b.xyz);
	OUT.n.w = dot(viewVec, OUT.n.xyz);

	OUT.oLightPosition0 = mul(texWorldViewProjMatrix0, IN.p);
	OUT.oLightPosition1 = mul(texWorldViewProjMatrix1, IN.p);
	OUT.oLightPosition2 = mul(texWorldViewProjMatrix2, IN.p);
	OUT.oLightPosition3 = mul(texWorldViewProjMatrix3, IN.p);

	return OUT;
}

void main_ps(
	PIn IN,
	uniform float3 diffuseColor,
	uniform float4 lightDif0,
	uniform float4 lightPos0,
	uniform float4 specColorPow,
	uniform float brightness,
	uniform float ambientWeight,
	uniform float uvScale,
	uniform float detailScale,
	uniform float3 camPos,
	uniform float4 fogColor,
	uniform float4 fogParams,
	uniform float3 ambientColor,
	uniform float4x4 iTWMat,
	uniform float4 cubemapWPOffset,
	float2 screenSpace : WPOS,
	uniform sampler2D diffuseMap : register(s0),
	uniform sampler2D normalMap : register(s1),
	uniform sampler2D dispMap : register(s2),
	uniform sampler2D shadowMap0 : register(s3),
	uniform sampler2D shadowMap1 : register(s4),
	uniform sampler2D shadowMap2 : register(s5),
	uniform sampler2D shadowMap3 : register(s6),
	uniform sampler2D normalDetailMap : register(s7),
	uniform samplerCube envMap : register(s8),
	out float4 color0 : COLOR0,
	out float4 color1 : COLOR1,
	out float4 color2 : COLOR2,
	out float4 color3 : COLOR3
	)
{
	float uvDetailScale = uvScale*detailScale;
	
	// direction
	float3 lightDir = normalize(lightPos0.xyz - (lightPos0.w * IN.wp.xyz));

	//pm offset
	float3 vVec = float3(IN.t.w, IN.b.w, IN.n.w);	
	float2 texCoordDispOffset = getDisplacementOffset(dispMap, IN.uv.xy * uvScale, vVec);
	
	float2 texCoordBase = IN.uv.xy * uvScale + texCoordDispOffset;
	float2 texCoordDetail = IN.uv.xy * uvDetailScale + texCoordDispOffset;
	
	//base normal+detail
	float3 normalTex = blendMaps(normalMap, normalDetailMap, texCoordBase, texCoordDetail);
	
	//lighting
	float3 normal = transformNormal(IN.t, IN.b, IN.n, normalTex, iTWMat);
	float3 camDir = IN.wp.xyz - camPos.xyz;
	float distance = length(camDir);
	camDir = normalize(camDir);

	float4 diffuseTex = tex2D(diffuseMap, texCoordBase);
	diffuseTex.rgb *= diffuseColor;
	
	float4 cmReflect = getCubemapReflection(envMap, camDir,normal,IN.wp.xyz,cubemapWPOffset);
	
	diffuseTex.rgb = lerp(diffuseTex.rgb, cmReflect.rgb, cmReflect.w*0.5);	
	
	float lighting = dot(lightDir, normal);
	
	float4 specular = getSpecular(lightDir, camDir, normal, specColorPow);
	
	float shadowing = getPssmShadow(lighting, IN.uv.z, shadowMap0, IN.LightPosition0, shadowMap1, IN.LightPosition1, shadowMap2, IN.LightPosition2, shadowMap3, IN.LightPosition3);
	
	ambientColor *= ambientWeight;
	
	float3 underShadow = max(shadowing.xxx,ambientColor);
	lighting = abs(max(lighting,lighting/2));		
	float3 diffuse = lerp(ambientColor, lightDif0.rgb, underShadow*lighting);
	
	float3 outColor = (diffuse*diffuseTex + specular.rgb);
	outColor = applyFog(outColor, distance, fogParams, fogColor);
	
	color0 = float4(outColor, 1);
	color1 = float4(0, 0, 0, brightness + saturate(specular.w / 2));
	color2 = float4(0, 0, 0, 1);
	color3 = float4(1 - IN.uv.z / IN.uv.w, distance, 0, 1);
}