#include "shadow.cg"
#include "filters.cg"
#include "general.cg"

struct VIn
{
	float4 p : POSITION;
	float3 n : NORMAL;
	float3 t : TANGENT;
	float4 c : COLOR;
	float2 uv : TEXCOORD0;
	float2 uv2 : TEXCOORD1;
};

struct VOut
{
	float4 p : POSITION;
	float4 uv : TEXCOORD0;
	float4 wp : TEXCOORD1;
	float4 n : TEXCOORD2;
	float4 t : TEXCOORD3;
	float4 b : TEXCOORD4;
	float4 vc : TEXCOORD5;
	float4 oLightPosition0 : TEXCOORD6;
	float4 oLightPosition1 : TEXCOORD7;
	float4 oLightPosition2 : TEXCOORD8;
	float4 oLightPosition3 : TEXCOORD9;
};

struct PIn
{
	float4 uv : TEXCOORD0;
	float4 wp : TEXCOORD1;
	float4 n : TEXCOORD2;
	float4 t : TEXCOORD3;
	float4 b : TEXCOORD4;
	float4 vc : TEXCOORD5;
	float4 LightPosition0 : TEXCOORD6;
	float4 LightPosition1 : TEXCOORD7;
	float4 LightPosition2 : TEXCOORD8;
	float4 LightPosition3 : TEXCOORD9;
};


VOut main_vs(VIn IN,
	uniform float4x4 wMat,
	uniform float4x4 wvpMat,
	uniform float3 camPos,
	uniform float4x4 texWorldViewProjMatrix0,
	uniform float4x4 texWorldViewProjMatrix1,
	uniform float4x4 texWorldViewProjMatrix2,
	uniform float4x4 texWorldViewProjMatrix3

	)
{
	VOut OUT;
	OUT.wp.xyz = mul(wMat, IN.p).xyz;
	OUT.wp.w = 1-IN.uv2.x;
	
	OUT.p = mul(wvpMat, IN.p);
	OUT.vc = IN.c;

	OUT.uv.xy = IN.uv.xy;
	OUT.uv.zw = OUT.p.zw;

	OUT.n.xyz = IN.n;
	OUT.t.xyz = IN.t;
	OUT.b.xyz = cross(IN.t, IN.n);

	float3 viewVec = camPos - IN.p.xyz;
	OUT.t.w = dot(viewVec, OUT.t.xyz);
	OUT.b.w = dot(viewVec, OUT.b.xyz);
	OUT.n.w = dot(viewVec, OUT.n.xyz);

	OUT.oLightPosition0 = mul(texWorldViewProjMatrix0, IN.p);
	OUT.oLightPosition1 = mul(texWorldViewProjMatrix1, IN.p);
	OUT.oLightPosition2 = mul(texWorldViewProjMatrix2, IN.p);
	OUT.oLightPosition3 = mul(texWorldViewProjMatrix3, IN.p);

	return OUT;
}

void main_ps(
	PIn IN,
	uniform float4 lightDif0,
	uniform float4 lightPos0,
	uniform float4 matSpec0,
	uniform float matShininess,	
	uniform float uvScale,
	uniform float uvSpreadScale,
	uniform float uv2Scale,
	uniform float2 uvMinMaxDetailScale,
	uniform float2 uvMinMaxDetailW,
	uniform float specular2Weight,
	uniform float3 camPos,
	uniform float ambientWeight,
	uniform float3 ambientColor,
	uniform float4 fogColor,
	uniform float4 fogParams,
	uniform float4x4 iTWMat,
	float2 screenSpace : WPOS,
	uniform sampler2D diffuseMap : register(s0),
	uniform sampler2D normalMap : register(s1),
	uniform sampler2D dispMap : register(s2),
	uniform sampler2D spreadMap : register(s3),
	uniform sampler2D diffuseMap2 : register(s4),
	uniform sampler2D normalMap2 : register(s5),
	uniform sampler2D shadowMap0 : register(s6),
	uniform sampler2D shadowMap1 : register(s7),
	uniform sampler2D shadowMap2 : register(s8),
	uniform sampler2D shadowMap3 : register(s9),
	uniform sampler2D normalDetailMap : register(s10),
	out float4 color0 : COLOR0,
	out float4 color1 : COLOR1,
	out float4 color2 : COLOR2,
	out float4 color3 : COLOR3
	)
{
	float uvDetailScale = uvScale*uvMinMaxDetailScale.x;
	float uvMaxScale = uvScale*uvMinMaxDetailScale.y;
	
	// direction
	float3 lightDir = normalize(lightPos0.xyz - (lightPos0.w * IN.wp.xyz));

	//pm offset
	float height = tex2D(dispMap, IN.uv.xy * uvScale).x;
	float3 vVec = float3(IN.t.w, IN.b.w, IN.n.w);
	float2 texCoordDispOffset = (0.05 * height - 0.025) * normalize(vVec).xy;
	
	float2 texCoordBase = IN.uv.xy * uvScale + texCoordDispOffset;
	float2 texCoordBase2 = IN.uv.xy * uv2Scale + texCoordDispOffset;
	float2 texCoordMax = IN.uv.xy * uvMaxScale + texCoordDispOffset;
	float2 texCoordDetail = IN.uv.xy * uvDetailScale + texCoordDispOffset;
	float2 texCoordSpread = IN.uv.xy * uvSpreadScale + texCoordDispOffset;
	
	//spread
	//////////////////////////////////////////////////
	float spreadVC = 1 - IN.vc.w;
	float inside=smoothstep(0.25,1,spreadVC);
	//inside+=smoothstep(0.381385,1,spreadVC);

	//inside=pow(inside,1);

	float spread0=tex2D(spreadMap,texCoordSpread).g;
	float spread1=tex2D(spreadMap, texCoordSpread*3).g;

	spread0+=inside;
	spread0=pow(spread0,1+spreadVC);

	spread1-=(1-spreadVC)/2;
	spread1=pow(spread1,1+spreadVC);	

	spread0*=inside+spread1;
	spread0=smoothstep(0.121,0.3450,spread0);
	spreadVC=smoothstep(0.01,0.125,spreadVC);
	float inter=saturate(spread0*spreadVC+inside);
	///////////////////////////////////////////////////////
	
	//base normal+detail
	float3 normalTex = tex2D(normalMap, texCoordBase).rgb;
	float3 normalTex2 = tex2D(normalDetailMap, texCoordDetail).rgb;
	//normalTex = color_blend(normalTex,normalTex2).rgb;
	float detailN = lerp(1,pow(normalTex2.r + normalTex2.g,2),uvMinMaxDetailW.x);
	
	//lerp with 2. normal
	normalTex2 = tex2D(normalMap2, texCoordBase2).rgb;
	normalTex = lerp(normalTex2, normalTex, inter);

	//blend with max detail normal
	normalTex2 = tex2D(normalDetailMap, texCoordMax).rgb;
	normalTex = lerp(normalTex, color_blend(normalTex,normalTex2).rgb,uvMinMaxDetailW.y);//lerp(normalTex.rgb, color_blend(normalTex,normalTex2).rgb, IN.wp.w);
	
	//lighting
	float3 normal = transformNormal(IN.t.xyz, IN.b.xyz, IN.n.xyz, normalTex, iTWMat);

	float3 eyeDir = IN.wp.xyz - camPos.xyz;
	float dist = length(eyeDir);
	eyeDir = normalize(eyeDir);

	float4 diffuseTex = lerp(tex2D(diffuseMap2, texCoordBase2), tex2D(diffuseMap, texCoordBase), inter);
	float diffuseLight = dot(lightDir, normal);

	float3 camDir = normalize(camPos - IN.wp.xyz);
	float3 halfVec = normalize(lightDir + camDir);
	float3 specular = pow(max(dot(normal, halfVec), 0), matShininess);

	//shadow
	float norm = diffuseLight;
	float shadowing = 1.0f;
	
	if (norm < 0)
		shadowing = 0;
	else
	{

		float adder = 1;

		if (norm < 0.5)
			adder += (0.5 - norm) * shFil*5;


		if (IN.uv.z <= 12)                                                                     
		{

			shadowing = shadowSmooth(shadowMap0, IN.LightPosition0, 0.0000015*adder, shTex);
		}
		else if (IN.uv.z <= 30)
		{
			shadowing = shadowSmooth(shadowMap1, IN.LightPosition1, 0.000000235*adder, shTex);
		}
		else if (IN.uv.z <= 120)
		{
			shadowing = shadowSmooth(shadowMap2, IN.LightPosition2, 0.00000037*adder, shTex);
		}
		else if (IN.uv.z <= 600)
		{
			shadowing = shadowSmooth(shadowMap3, IN.LightPosition3, 0.00000032, shTex);
		}

		if (norm < 0.5)
			shadowing *= norm * 2;

	}

	ambientColor *= ambientWeight;
	float3 vertexLight = ambientColor+(1-ambientColor)*saturate(IN.vc.rgb);
	
	//slight gi normal mapping
	diffuseLight = abs(max(diffuseLight,diffuseLight/2));

	float3 diffuseContrib = saturate(diffuseLight* lightDif0.rgb + vertexLight)*detailN;
	float specWeight = lerp(specular2Weight, 1, inter);
	float3 specularContrib = (specular * matSpec0.rgb*specWeight );
	float3 rawColor = (diffuseContrib + specularContrib)*diffuseTex;
	
	float3 directLight = saturate(shadowing + vertexLight);
	
	float3 darkness = max(shadowing.xxx,vertexLight);
	float3 ambientLight = (vertexLight);
	float4 output = float4(rawColor*lerp(ambientLight, max(directLight,vertexLight),darkness),1);
	
	//distance fog
	output.rgb = applyFog(output.rgb, dist, fogParams, fogColor);

	color0 = output;
	color1 = float4(0.5, 0.5, 0.5, saturate(matSpec0.a + specular.r / 2));
	color2 = float4(0, 0, 0, 1);
	color3 = float4(1 - IN.uv.z / IN.uv.w, dist, 0, 1);
}